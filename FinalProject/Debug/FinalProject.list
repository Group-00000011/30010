
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002014  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  0800219c  0800219c  0001219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002408  08002408  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002408  08002408  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002408  08002408  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002408  08002408  00012408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800240c  0800240c  0001240c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000090  080024a0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080024a0  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005860  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001194  00000000  00000000  00025920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  00026ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000598  00000000  00000000  00027110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000038d0  00000000  00000000  000276a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005e9a  00000000  00000000  0002af78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a56b  00000000  00000000  00030e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008b37d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ffc  00000000  00000000  0008b3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002184 	.word	0x08002184

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08002184 	.word	0x08002184

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80001d8:	b480      	push	{r7}
 80001da:	b08b      	sub	sp, #44	; 0x2c
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80001e0:	2300      	movs	r3, #0
 80001e2:	623b      	str	r3, [r7, #32]
 80001e4:	2300      	movs	r3, #0
 80001e6:	61fb      	str	r3, [r7, #28]
 80001e8:	2300      	movs	r3, #0
 80001ea:	61bb      	str	r3, [r7, #24]
 80001ec:	2300      	movs	r3, #0
 80001ee:	617b      	str	r3, [r7, #20]
 80001f0:	2300      	movs	r3, #0
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	2300      	movs	r3, #0
 80001f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	2300      	movs	r3, #0
 80001fe:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000200:	4b8b      	ldr	r3, [pc, #556]	; (8000430 <RCC_GetClocksFreq+0x258>)
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	f003 030c 	and.w	r3, r3, #12
 8000208:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800020a:	6a3b      	ldr	r3, [r7, #32]
 800020c:	2b08      	cmp	r3, #8
 800020e:	d011      	beq.n	8000234 <RCC_GetClocksFreq+0x5c>
 8000210:	6a3b      	ldr	r3, [r7, #32]
 8000212:	2b08      	cmp	r3, #8
 8000214:	d837      	bhi.n	8000286 <RCC_GetClocksFreq+0xae>
 8000216:	6a3b      	ldr	r3, [r7, #32]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d003      	beq.n	8000224 <RCC_GetClocksFreq+0x4c>
 800021c:	6a3b      	ldr	r3, [r7, #32]
 800021e:	2b04      	cmp	r3, #4
 8000220:	d004      	beq.n	800022c <RCC_GetClocksFreq+0x54>
 8000222:	e030      	b.n	8000286 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	4a83      	ldr	r2, [pc, #524]	; (8000434 <RCC_GetClocksFreq+0x25c>)
 8000228:	601a      	str	r2, [r3, #0]
      break;
 800022a:	e030      	b.n	800028e <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a81      	ldr	r2, [pc, #516]	; (8000434 <RCC_GetClocksFreq+0x25c>)
 8000230:	601a      	str	r2, [r3, #0]
      break;
 8000232:	e02c      	b.n	800028e <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000234:	4b7e      	ldr	r3, [pc, #504]	; (8000430 <RCC_GetClocksFreq+0x258>)
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800023c:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800023e:	4b7c      	ldr	r3, [pc, #496]	; (8000430 <RCC_GetClocksFreq+0x258>)
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000246:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000248:	69fb      	ldr	r3, [r7, #28]
 800024a:	0c9b      	lsrs	r3, r3, #18
 800024c:	3302      	adds	r3, #2
 800024e:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000250:	69bb      	ldr	r3, [r7, #24]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d105      	bne.n	8000262 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000256:	69fb      	ldr	r3, [r7, #28]
 8000258:	4a77      	ldr	r2, [pc, #476]	; (8000438 <RCC_GetClocksFreq+0x260>)
 800025a:	fb02 f303 	mul.w	r3, r2, r3
 800025e:	627b      	str	r3, [r7, #36]	; 0x24
 8000260:	e00d      	b.n	800027e <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000262:	4b73      	ldr	r3, [pc, #460]	; (8000430 <RCC_GetClocksFreq+0x258>)
 8000264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000266:	f003 030f 	and.w	r3, r3, #15
 800026a:	3301      	adds	r3, #1
 800026c:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800026e:	4a71      	ldr	r2, [pc, #452]	; (8000434 <RCC_GetClocksFreq+0x25c>)
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	fbb2 f2f3 	udiv	r2, r2, r3
 8000276:	69fb      	ldr	r3, [r7, #28]
 8000278:	fb02 f303 	mul.w	r3, r2, r3
 800027c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000282:	601a      	str	r2, [r3, #0]
      break;
 8000284:	e003      	b.n	800028e <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	4a6a      	ldr	r2, [pc, #424]	; (8000434 <RCC_GetClocksFreq+0x25c>)
 800028a:	601a      	str	r2, [r3, #0]
      break;
 800028c:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800028e:	4b68      	ldr	r3, [pc, #416]	; (8000430 <RCC_GetClocksFreq+0x258>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000296:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000298:	6a3b      	ldr	r3, [r7, #32]
 800029a:	091b      	lsrs	r3, r3, #4
 800029c:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 800029e:	4a67      	ldr	r2, [pc, #412]	; (800043c <RCC_GetClocksFreq+0x264>)
 80002a0:	6a3b      	ldr	r3, [r7, #32]
 80002a2:	4413      	add	r3, r2
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	40da      	lsrs	r2, r3
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80002b6:	4b5e      	ldr	r3, [pc, #376]	; (8000430 <RCC_GetClocksFreq+0x258>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80002be:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80002c0:	6a3b      	ldr	r3, [r7, #32]
 80002c2:	0a1b      	lsrs	r3, r3, #8
 80002c4:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80002c6:	4a5d      	ldr	r2, [pc, #372]	; (800043c <RCC_GetClocksFreq+0x264>)
 80002c8:	6a3b      	ldr	r3, [r7, #32]
 80002ca:	4413      	add	r3, r2
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	685a      	ldr	r2, [r3, #4]
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	40da      	lsrs	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80002de:	4b54      	ldr	r3, [pc, #336]	; (8000430 <RCC_GetClocksFreq+0x258>)
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80002e6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80002e8:	6a3b      	ldr	r3, [r7, #32]
 80002ea:	0adb      	lsrs	r3, r3, #11
 80002ec:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80002ee:	4a53      	ldr	r2, [pc, #332]	; (800043c <RCC_GetClocksFreq+0x264>)
 80002f0:	6a3b      	ldr	r3, [r7, #32]
 80002f2:	4413      	add	r3, r2
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	685a      	ldr	r2, [r3, #4]
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	40da      	lsrs	r2, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000306:	4b4a      	ldr	r3, [pc, #296]	; (8000430 <RCC_GetClocksFreq+0x258>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800030e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000310:	6a3b      	ldr	r3, [r7, #32]
 8000312:	091b      	lsrs	r3, r3, #4
 8000314:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000316:	4a4a      	ldr	r2, [pc, #296]	; (8000440 <RCC_GetClocksFreq+0x268>)
 8000318:	6a3b      	ldr	r3, [r7, #32]
 800031a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800031e:	b29b      	uxth	r3, r3
 8000320:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	f003 0310 	and.w	r3, r3, #16
 8000328:	2b00      	cmp	r3, #0
 800032a:	d006      	beq.n	800033a <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 800032c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800032e:	693b      	ldr	r3, [r7, #16]
 8000330:	fbb2 f2f3 	udiv	r2, r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	611a      	str	r2, [r3, #16]
 8000338:	e003      	b.n	8000342 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681a      	ldr	r2, [r3, #0]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000342:	4b3b      	ldr	r3, [pc, #236]	; (8000430 <RCC_GetClocksFreq+0x258>)
 8000344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000346:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 800034a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 800034c:	6a3b      	ldr	r3, [r7, #32]
 800034e:	0a5b      	lsrs	r3, r3, #9
 8000350:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000352:	4a3b      	ldr	r2, [pc, #236]	; (8000440 <RCC_GetClocksFreq+0x268>)
 8000354:	6a3b      	ldr	r3, [r7, #32]
 8000356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800035a:	b29b      	uxth	r3, r3
 800035c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	f003 0310 	and.w	r3, r3, #16
 8000364:	2b00      	cmp	r3, #0
 8000366:	d006      	beq.n	8000376 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	615a      	str	r2, [r3, #20]
 8000374:	e003      	b.n	800037e <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800037e:	4b2c      	ldr	r3, [pc, #176]	; (8000430 <RCC_GetClocksFreq+0x258>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	f003 0310 	and.w	r3, r3, #16
 8000386:	2b10      	cmp	r3, #16
 8000388:	d003      	beq.n	8000392 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a29      	ldr	r2, [pc, #164]	; (8000434 <RCC_GetClocksFreq+0x25c>)
 800038e:	619a      	str	r2, [r3, #24]
 8000390:	e003      	b.n	800039a <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <RCC_GetClocksFreq+0x258>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039e:	f003 0320 	and.w	r3, r3, #32
 80003a2:	2b20      	cmp	r3, #32
 80003a4:	d003      	beq.n	80003ae <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a22      	ldr	r2, [pc, #136]	; (8000434 <RCC_GetClocksFreq+0x25c>)
 80003aa:	61da      	str	r2, [r3, #28]
 80003ac:	e003      	b.n	80003b6 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80003b6:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <RCC_GetClocksFreq+0x258>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003c2:	d10d      	bne.n	80003e0 <RCC_GetClocksFreq+0x208>
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d108      	bne.n	80003e0 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d104      	bne.n	80003e0 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80003d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d8:	005a      	lsls	r2, r3, #1
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	621a      	str	r2, [r3, #32]
 80003de:	e003      	b.n	80003e8 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	68da      	ldr	r2, [r3, #12]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <RCC_GetClocksFreq+0x258>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003f4:	d10d      	bne.n	8000412 <RCC_GetClocksFreq+0x23a>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d108      	bne.n	8000412 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000400:	68fa      	ldr	r2, [r7, #12]
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	429a      	cmp	r2, r3
 8000406:	d104      	bne.n	8000412 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040a:	005a      	lsls	r2, r3, #1
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	625a      	str	r2, [r3, #36]	; 0x24
 8000410:	e003      	b.n	800041a <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	68da      	ldr	r2, [r3, #12]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <RCC_GetClocksFreq+0x258>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	f003 0303 	and.w	r3, r3, #3
 8000422:	2b00      	cmp	r3, #0
 8000424:	d10e      	bne.n	8000444 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	68da      	ldr	r2, [r3, #12]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	629a      	str	r2, [r3, #40]	; 0x28
 800042e:	e028      	b.n	8000482 <RCC_GetClocksFreq+0x2aa>
 8000430:	40021000 	.word	0x40021000
 8000434:	007a1200 	.word	0x007a1200
 8000438:	003d0900 	.word	0x003d0900
 800043c:	20000000 	.word	0x20000000
 8000440:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000444:	4b6c      	ldr	r3, [pc, #432]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000448:	f003 0303 	and.w	r3, r3, #3
 800044c:	2b01      	cmp	r3, #1
 800044e:	d104      	bne.n	800045a <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	629a      	str	r2, [r3, #40]	; 0x28
 8000458:	e013      	b.n	8000482 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800045a:	4b67      	ldr	r3, [pc, #412]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045e:	f003 0303 	and.w	r3, r3, #3
 8000462:	2b02      	cmp	r3, #2
 8000464:	d104      	bne.n	8000470 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800046c:	629a      	str	r2, [r3, #40]	; 0x28
 800046e:	e008      	b.n	8000482 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000470:	4b61      	ldr	r3, [pc, #388]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000474:	f003 0303 	and.w	r3, r3, #3
 8000478:	2b03      	cmp	r3, #3
 800047a:	d102      	bne.n	8000482 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a5f      	ldr	r2, [pc, #380]	; (80005fc <RCC_GetClocksFreq+0x424>)
 8000480:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000482:	4b5d      	ldr	r3, [pc, #372]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000486:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800048a:	2b00      	cmp	r3, #0
 800048c:	d104      	bne.n	8000498 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	689a      	ldr	r2, [r3, #8]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	62da      	str	r2, [r3, #44]	; 0x2c
 8000496:	e021      	b.n	80004dc <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000498:	4b57      	ldr	r3, [pc, #348]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80004a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004a4:	d104      	bne.n	80004b0 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ae:	e015      	b.n	80004dc <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80004b0:	4b51      	ldr	r3, [pc, #324]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 80004b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80004b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80004bc:	d104      	bne.n	80004c8 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004c6:	e009      	b.n	80004dc <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80004c8:	4b4b      	ldr	r3, [pc, #300]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80004d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80004d4:	d102      	bne.n	80004dc <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a48      	ldr	r2, [pc, #288]	; (80005fc <RCC_GetClocksFreq+0x424>)
 80004da:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80004dc:	4b46      	ldr	r3, [pc, #280]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d104      	bne.n	80004f2 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	689a      	ldr	r2, [r3, #8]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	631a      	str	r2, [r3, #48]	; 0x30
 80004f0:	e021      	b.n	8000536 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80004f2:	4b41      	ldr	r3, [pc, #260]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80004fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80004fe:	d104      	bne.n	800050a <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	631a      	str	r2, [r3, #48]	; 0x30
 8000508:	e015      	b.n	8000536 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 800050a:	4b3b      	ldr	r3, [pc, #236]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000512:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000516:	d104      	bne.n	8000522 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
 8000520:	e009      	b.n	8000536 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000522:	4b35      	ldr	r3, [pc, #212]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800052a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800052e:	d102      	bne.n	8000536 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a32      	ldr	r2, [pc, #200]	; (80005fc <RCC_GetClocksFreq+0x424>)
 8000534:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000536:	4b30      	ldr	r3, [pc, #192]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800053e:	2b00      	cmp	r3, #0
 8000540:	d104      	bne.n	800054c <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	689a      	ldr	r2, [r3, #8]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
 800054a:	e021      	b.n	8000590 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 800054c:	4b2a      	ldr	r3, [pc, #168]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000558:	d104      	bne.n	8000564 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	e015      	b.n	8000590 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800056c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000570:	d104      	bne.n	800057c <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
 800057a:	e009      	b.n	8000590 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 800057e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000580:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000584:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000588:	d102      	bne.n	8000590 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <RCC_GetClocksFreq+0x424>)
 800058e:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000594:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000598:	2b00      	cmp	r3, #0
 800059a:	d104      	bne.n	80005a6 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	689a      	ldr	r2, [r3, #8]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 80005a4:	e021      	b.n	80005ea <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 80005a6:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80005ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80005b2:	d104      	bne.n	80005be <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005bc:	e015      	b.n	80005ea <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80005c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80005ca:	d104      	bne.n	80005d6 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005d2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005d4:	e009      	b.n	80005ea <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <RCC_GetClocksFreq+0x420>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80005de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80005e2:	d102      	bne.n	80005ea <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <RCC_GetClocksFreq+0x424>)
 80005e8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005ea:	bf00      	nop
 80005ec:	372c      	adds	r7, #44	; 0x2c
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000
 80005fc:	007a1200 	.word	0x007a1200

08000600 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	330c      	adds	r3, #12
 8000618:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	78fa      	ldrb	r2, [r7, #3]
 800061e:	701a      	strb	r2, [r3, #0]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000638:	2300      	movs	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	891b      	ldrh	r3, [r3, #8]
 8000640:	b29a      	uxth	r2, r3
 8000642:	887b      	ldrh	r3, [r7, #2]
 8000644:	4013      	ands	r3, r2
 8000646:	b29b      	uxth	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800064c:	2301      	movs	r3, #1
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	e001      	b.n	8000656 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000652:	2300      	movs	r3, #0
 8000654:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000670:	887b      	ldrh	r3, [r7, #2]
 8000672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000676:	b29a      	uxth	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000688:	b480      	push	{r7}
 800068a:	b089      	sub	sp, #36	; 0x24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006ba:	2201      	movs	r2, #1
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	fa02 f303 	lsl.w	r3, r2, r3
 80006c2:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d103      	bne.n	80006d2 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3304      	adds	r3, #4
 80006ce:	61fb      	str	r3, [r7, #28]
 80006d0:	e005      	b.n	80006de <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d102      	bne.n	80006de <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	3308      	adds	r3, #8
 80006dc:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d006      	beq.n	80006f2 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	6819      	ldr	r1, [r3, #0]
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	693a      	ldr	r2, [r7, #16]
 80006ec:	430a      	orrs	r2, r1
 80006ee:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80006f0:	e006      	b.n	8000700 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	6819      	ldr	r1, [r3, #0]
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	43da      	mvns	r2, r3
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	400a      	ands	r2, r1
 80006fe:	601a      	str	r2, [r3, #0]
}
 8000700:	bf00      	nop
 8000702:	3724      	adds	r7, #36	; 0x24
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000716:	2300      	movs	r3, #0
 8000718:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	69da      	ldr	r2, [r3, #28]
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	4013      	ands	r3, r2
 8000722:	2b00      	cmp	r3, #0
 8000724:	d002      	beq.n	800072c <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000726:	2301      	movs	r3, #1
 8000728:	73fb      	strb	r3, [r7, #15]
 800072a:	e001      	b.n	8000730 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000730:	7bfb      	ldrb	r3, [r7, #15]
}
 8000732:	4618      	mov	r0, r3
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800073e:	b480      	push	{r7}
 8000740:	b087      	sub	sp, #28
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	b29b      	uxth	r3, r3
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	b29b      	uxth	r3, r3
 8000760:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000768:	2201      	movs	r2, #1
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d105      	bne.n	8000784 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	4013      	ands	r3, r2
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	e00d      	b.n	80007a0 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d105      	bne.n	8000796 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	697a      	ldr	r2, [r7, #20]
 8000790:	4013      	ands	r3, r2
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e004      	b.n	80007a0 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	4013      	ands	r3, r2
 800079e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	0c1b      	lsrs	r3, r3, #16
 80007a4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80007a6:	2201      	movs	r2, #1
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	69db      	ldr	r3, [r3, #28]
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	4013      	ands	r3, r2
 80007b8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d005      	beq.n	80007cc <USART_GetITStatus+0x8e>
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80007c6:	2301      	movs	r3, #1
 80007c8:	74fb      	strb	r3, [r7, #19]
 80007ca:	e001      	b.n	80007d0 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 80007cc:	2300      	movs	r3, #0
 80007ce:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80007d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	371c      	adds	r7, #28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
	...

080007e0 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f003 031f 	and.w	r3, r3, #31
 80007f0:	2201      	movs	r2, #1
 80007f2:	fa02 f103 	lsl.w	r1, r2, r3
 80007f6:	4a06      	ldr	r2, [pc, #24]	; (8000810 <NVIC_EnableIRQ+0x30>)
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	095b      	lsrs	r3, r3, #5
 80007fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000e100 	.word	0xe000e100

08000814 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	b29b      	uxth	r3, r3
 8000822:	4619      	mov	r1, r3
 8000824:	4807      	ldr	r0, [pc, #28]	; (8000844 <uart_put_char+0x30>)
 8000826:	f7ff ff1d 	bl	8000664 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 800082a:	bf00      	nop
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <uart_put_char+0x30>)
 8000830:	f7ff ff6c 	bl	800070c <USART_GetFlagStatus>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0f8      	beq.n	800082c <uart_put_char+0x18>
}
 800083a:	bf00      	nop
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40004400 	.word	0x40004400

08000848 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
 8000854:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	e012      	b.n	8000882 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b0a      	cmp	r3, #10
 8000866:	d102      	bne.n	800086e <_write_r+0x26>
            uart_put_char('\r');
 8000868:	200d      	movs	r0, #13
 800086a:	f7ff ffd3 	bl	8000814 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	4413      	add	r3, r2
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ffcc 	bl	8000814 <uart_put_char>
    for (n = 0; n < len; n++) {
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3301      	adds	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	429a      	cmp	r2, r3
 8000888:	dbe8      	blt.n	800085c <_write_r+0x14>
    }

    return len;
 800088a:	683b      	ldr	r3, [r7, #0]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000898:	4915      	ldr	r1, [pc, #84]	; (80008f0 <USART2_IRQHandler+0x5c>)
 800089a:	4816      	ldr	r0, [pc, #88]	; (80008f4 <USART2_IRQHandler+0x60>)
 800089c:	f7ff ff4f 	bl	800073e <USART_GetITStatus>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d021      	beq.n	80008ea <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <USART2_IRQHandler+0x60>)
 80008a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008aa:	b299      	uxth	r1, r3
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <USART2_IRQHandler+0x64>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	b2d0      	uxtb	r0, r2
 80008b6:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <USART2_IRQHandler+0x64>)
 80008b8:	7010      	strb	r0, [r2, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	b2c9      	uxtb	r1, r1
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <USART2_IRQHandler+0x68>)
 80008c0:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <USART2_IRQHandler+0x6c>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2bff      	cmp	r3, #255	; 0xff
 80008ca:	d107      	bne.n	80008dc <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <USART2_IRQHandler+0x70>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	3301      	adds	r3, #1
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <USART2_IRQHandler+0x70>)
 80008d8:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 80008da:	e006      	b.n	80008ea <USART2_IRQHandler+0x56>
            UART_COUNT++;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <USART2_IRQHandler+0x6c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <USART2_IRQHandler+0x6c>)
 80008e8:	701a      	strb	r2, [r3, #0]
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	00050105 	.word	0x00050105
 80008f4:	40004400 	.word	0x40004400
 80008f8:	200001ac 	.word	0x200001ac
 80008fc:	200000ac 	.word	0x200000ac
 8000900:	200001ae 	.word	0x200001ae
 8000904:	200001ad 	.word	0x200001ad

08000908 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b094      	sub	sp, #80	; 0x50
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000910:	4b86      	ldr	r3, [pc, #536]	; (8000b2c <uart_init+0x224>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f000 fff7 	bl	800190c <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 800091e:	4b83      	ldr	r3, [pc, #524]	; (8000b2c <uart_init+0x224>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fff0 	bl	800190c <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 800092c:	4b80      	ldr	r3, [pc, #512]	; (8000b30 <uart_init+0x228>)
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	4a7f      	ldr	r2, [pc, #508]	; (8000b30 <uart_init+0x228>)
 8000932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000936:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000938:	4b7d      	ldr	r3, [pc, #500]	; (8000b30 <uart_init+0x228>)
 800093a:	69db      	ldr	r3, [r3, #28]
 800093c:	4a7c      	ldr	r2, [pc, #496]	; (8000b30 <uart_init+0x228>)
 800093e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000942:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000944:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000948:	6a1b      	ldr	r3, [r3, #32]
 800094a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800094e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000952:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000954:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000958:	6a1b      	ldr	r3, [r3, #32]
 800095a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800095e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000962:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000964:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000968:	6a1b      	ldr	r3, [r3, #32]
 800096a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800096e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000972:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000974:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000978:	6a1b      	ldr	r3, [r3, #32]
 800097a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800097e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000982:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000984:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800098e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000992:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000994:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800099e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80009a2:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80009a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009a8:	889b      	ldrh	r3, [r3, #4]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009b0:	f023 030c 	bic.w	r3, r3, #12
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80009b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009c0:	8892      	ldrh	r2, [r2, #4]
 80009c2:	b292      	uxth	r2, r2
 80009c4:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80009c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009d4:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80009d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009e0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80009e4:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 80009e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009f4:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80009f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a00:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a04:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000a06:	4b4b      	ldr	r3, [pc, #300]	; (8000b34 <uart_init+0x22c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a4a      	ldr	r2, [pc, #296]	; (8000b34 <uart_init+0x22c>)
 8000a0c:	f023 0301 	bic.w	r3, r3, #1
 8000a10:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000a12:	4b48      	ldr	r3, [pc, #288]	; (8000b34 <uart_init+0x22c>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	4a47      	ldr	r2, [pc, #284]	; (8000b34 <uart_init+0x22c>)
 8000a18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a1c:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000a1e:	4b45      	ldr	r3, [pc, #276]	; (8000b34 <uart_init+0x22c>)
 8000a20:	4a44      	ldr	r2, [pc, #272]	; (8000b34 <uart_init+0x22c>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000a26:	4b43      	ldr	r3, [pc, #268]	; (8000b34 <uart_init+0x22c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a42      	ldr	r2, [pc, #264]	; (8000b34 <uart_init+0x22c>)
 8000a2c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000a30:	f023 030c 	bic.w	r3, r3, #12
 8000a34:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000a36:	4b3f      	ldr	r3, [pc, #252]	; (8000b34 <uart_init+0x22c>)
 8000a38:	4a3e      	ldr	r2, [pc, #248]	; (8000b34 <uart_init+0x22c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000a3e:	4b3d      	ldr	r3, [pc, #244]	; (8000b34 <uart_init+0x22c>)
 8000a40:	4a3c      	ldr	r2, [pc, #240]	; (8000b34 <uart_init+0x22c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000a46:	4b3b      	ldr	r3, [pc, #236]	; (8000b34 <uart_init+0x22c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a3a      	ldr	r2, [pc, #232]	; (8000b34 <uart_init+0x22c>)
 8000a4c:	f043 030c 	orr.w	r3, r3, #12
 8000a50:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000a52:	4b38      	ldr	r3, [pc, #224]	; (8000b34 <uart_init+0x22c>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	4a37      	ldr	r2, [pc, #220]	; (8000b34 <uart_init+0x22c>)
 8000a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a5c:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000a5e:	4b35      	ldr	r3, [pc, #212]	; (8000b34 <uart_init+0x22c>)
 8000a60:	4a34      	ldr	r2, [pc, #208]	; (8000b34 <uart_init+0x22c>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8000a6e:	2300      	movs	r3, #0
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fbae 	bl	80001d8 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000a80:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <uart_init+0x22c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d010      	beq.n	8000aae <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a8e:	005a      	lsls	r2, r3, #1
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	fb01 f202 	mul.w	r2, r1, r2
 8000aa8:	1a9b      	subs	r3, r3, r2
 8000aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8000aac:	e00d      	b.n	8000aca <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	fb01 f202 	mul.w	r2, r1, r2
 8000ac6:	1a9b      	subs	r3, r3, r2
 8000ac8:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	085b      	lsrs	r3, r3, #1
 8000ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d302      	bcc.n	8000ada <uart_init+0x1d2>
        divider++;
 8000ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <uart_init+0x22c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00b      	beq.n	8000afe <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ae8:	085b      	lsrs	r3, r3, #1
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000af0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000af2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000af6:	4013      	ands	r3, r2
 8000af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000afa:	4313      	orrs	r3, r2
 8000afc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <uart_init+0x22c>)
 8000b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b02:	b292      	uxth	r2, r2
 8000b04:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <uart_init+0x22c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <uart_init+0x22c>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000b12:	2201      	movs	r2, #1
 8000b14:	4908      	ldr	r1, [pc, #32]	; (8000b38 <uart_init+0x230>)
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <uart_init+0x22c>)
 8000b18:	f7ff fdb6 	bl	8000688 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000b1c:	2026      	movs	r0, #38	; 0x26
 8000b1e:	f7ff fe5f 	bl	80007e0 <NVIC_EnableIRQ>
}
 8000b22:	bf00      	nop
 8000b24:	3750      	adds	r7, #80	; 0x50
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000002c 	.word	0x2000002c
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40004400 	.word	0x40004400
 8000b38:	00050105 	.word	0x00050105

08000b3c <lcd_transmit_byte>:

/*****************************/
/*** LCD Control Functions ***/
/*****************************/
void lcd_transmit_byte(uint8_t data) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR &= ~(0x0001 << 6); // CS = 0 - Start Transmission
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <lcd_transmit_byte+0x5c>)
 8000b48:	8a9b      	ldrh	r3, [r3, #20]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <lcd_transmit_byte+0x5c>)
 8000b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	8293      	strh	r3, [r2, #20]
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8000b56:	bf00      	nop
 8000b58:	2102      	movs	r1, #2
 8000b5a:	4810      	ldr	r0, [pc, #64]	; (8000b9c <lcd_transmit_byte+0x60>)
 8000b5c:	f7ff fd66 	bl	800062c <SPI_I2S_GetFlagStatus>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d1f8      	bne.n	8000b58 <lcd_transmit_byte+0x1c>
    SPI_SendData8(SPI2, data);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <lcd_transmit_byte+0x60>)
 8000b6c:	f7ff fd48 	bl	8000600 <SPI_SendData8>
    while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) != SET) { }
 8000b70:	bf00      	nop
 8000b72:	2102      	movs	r1, #2
 8000b74:	4809      	ldr	r0, [pc, #36]	; (8000b9c <lcd_transmit_byte+0x60>)
 8000b76:	f7ff fd59 	bl	800062c <SPI_I2S_GetFlagStatus>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d1f8      	bne.n	8000b72 <lcd_transmit_byte+0x36>
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - End Transmission
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <lcd_transmit_byte+0x5c>)
 8000b82:	8a9b      	ldrh	r3, [r3, #20]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <lcd_transmit_byte+0x5c>)
 8000b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	8293      	strh	r3, [r2, #20]
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	40003800 	.word	0x40003800

08000ba0 <lcd_push_buffer>:

void lcd_push_buffer(uint8_t* buffer)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    int i = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]

    //page 0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000bac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bb0:	8a9b      	ldrh	r3, [r3, #20]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff ffbb 	bl	8000b3c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000bc6:	2010      	movs	r0, #16
 8000bc8:	f7ff ffb8 	bl	8000b3c <lcd_transmit_byte>
    lcd_transmit_byte(0xB0);      // set page address  0
 8000bcc:	20b0      	movs	r0, #176	; 0xb0
 8000bce:	f7ff ffb5 	bl	8000b3c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000bd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bd6:	8a9b      	ldrh	r3, [r3, #20]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	8293      	strh	r3, [r2, #20]
    for(i=0; i<128; i++) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	e009      	b.n	8000c00 <lcd_push_buffer+0x60>
       lcd_transmit_byte(buffer[i]);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ffa1 	bl	8000b3c <lcd_transmit_byte>
    for(i=0; i<128; i++) {
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b7f      	cmp	r3, #127	; 0x7f
 8000c04:	ddf2      	ble.n	8000bec <lcd_push_buffer+0x4c>
    }

    // page 1
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000c06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c0a:	8a9b      	ldrh	r3, [r3, #20]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff ff8e 	bl	8000b3c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000c20:	2010      	movs	r0, #16
 8000c22:	f7ff ff8b 	bl	8000b3c <lcd_transmit_byte>
    lcd_transmit_byte(0xB1);      // set page address  1
 8000c26:	20b1      	movs	r0, #177	; 0xb1
 8000c28:	f7ff ff88 	bl	8000b3c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000c2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c30:	8a9b      	ldrh	r3, [r3, #20]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	8293      	strh	r3, [r2, #20]
    for( i = 128 ; i < 256 ; i++ ) {
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	e009      	b.n	8000c5a <lcd_push_buffer+0xba>
       lcd_transmit_byte(buffer[i]);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ff74 	bl	8000b3c <lcd_transmit_byte>
    for( i = 128 ; i < 256 ; i++ ) {
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3301      	adds	r3, #1
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2bff      	cmp	r3, #255	; 0xff
 8000c5e:	ddf2      	ble.n	8000c46 <lcd_push_buffer+0xa6>
    }

    //page 2
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000c60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c64:	8a9b      	ldrh	r3, [r3, #20]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff ff61 	bl	8000b3c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000c7a:	2010      	movs	r0, #16
 8000c7c:	f7ff ff5e 	bl	8000b3c <lcd_transmit_byte>
    lcd_transmit_byte(0xB2);      // set page address  2
 8000c80:	20b2      	movs	r0, #178	; 0xb2
 8000c82:	f7ff ff5b 	bl	8000b3c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000c86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c8a:	8a9b      	ldrh	r3, [r3, #20]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	8293      	strh	r3, [r2, #20]
    for(i=256; i<384; i++) {
 8000c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	e009      	b.n	8000cb6 <lcd_push_buffer+0x116>
       lcd_transmit_byte(buffer[i]);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff46 	bl	8000b3c <lcd_transmit_byte>
    for(i=256; i<384; i++) {
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000cbc:	dbf1      	blt.n	8000ca2 <lcd_push_buffer+0x102>
    }

    //page 3
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000cbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cc2:	8a9b      	ldrh	r3, [r3, #20]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	8293      	strh	r3, [r2, #20]
    lcd_transmit_byte(0x00);      // set column low nibble 0
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff ff32 	bl	8000b3c <lcd_transmit_byte>
    lcd_transmit_byte(0x10);      // set column hi  nibble 0
 8000cd8:	2010      	movs	r0, #16
 8000cda:	f7ff ff2f 	bl	8000b3c <lcd_transmit_byte>
    lcd_transmit_byte(0xB3);      // set page address  3
 8000cde:	20b3      	movs	r0, #179	; 0xb3
 8000ce0:	f7ff ff2c 	bl	8000b3c <lcd_transmit_byte>

    GPIOA->ODR |=  (0x0001 << 8); // A0 = 1 - Set Data
 8000ce4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ce8:	8a9b      	ldrh	r3, [r3, #20]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	8293      	strh	r3, [r2, #20]
    for(i=384; i<512; i++) {
 8000cf8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	e009      	b.n	8000d14 <lcd_push_buffer+0x174>
       lcd_transmit_byte(buffer[i]);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff17 	bl	8000b3c <lcd_transmit_byte>
    for(i=384; i<512; i++) {
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	3301      	adds	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d1a:	dbf1      	blt.n	8000d00 <lcd_push_buffer+0x160>
    }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <lcd_reset>:

void lcd_reset()
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Reset Command/Data
 8000d2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d32:	8a9b      	ldrh	r3, [r3, #20]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	8293      	strh	r3, [r2, #20]
    GPIOB->ODR |=  (0x0001 << 6); // CS = 1 - Reset C/S
 8000d42:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <lcd_reset+0xd8>)
 8000d44:	8a9b      	ldrh	r3, [r3, #20]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4a2d      	ldr	r2, [pc, #180]	; (8000e00 <lcd_reset+0xd8>)
 8000d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	8293      	strh	r3, [r2, #20]

    GPIOB->ODR &= ~(0x0001 << 14); // RESET = 0 - Reset Display
 8000d52:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <lcd_reset+0xd8>)
 8000d54:	8a9b      	ldrh	r3, [r3, #20]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	4a29      	ldr	r2, [pc, #164]	; (8000e00 <lcd_reset+0xd8>)
 8000d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 4680 ; i++) { asm("nop"); }; // Wait
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	e003      	b.n	8000d70 <lcd_reset+0x48>
 8000d68:	bf00      	nop
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f241 2247 	movw	r2, #4679	; 0x1247
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d9f6      	bls.n	8000d68 <lcd_reset+0x40>
    GPIOB->ODR |=  (0x0001 << 14); // RESET = 1 - Stop Reset
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <lcd_reset+0xd8>)
 8000d7c:	8a9b      	ldrh	r3, [r3, #20]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	4a1f      	ldr	r2, [pc, #124]	; (8000e00 <lcd_reset+0xd8>)
 8000d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	8293      	strh	r3, [r2, #20]
    for (uint32_t i = 0 ; i < 390000 ; i++) { asm("nop"); }; // Wait
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	e003      	b.n	8000d98 <lcd_reset+0x70>
 8000d90:	bf00      	nop
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <lcd_reset+0xdc>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d9f7      	bls.n	8000d90 <lcd_reset+0x68>

    // Configure Display
    GPIOA->ODR &= ~(0x0001 << 8); // A0 = 0 - Set Command
 8000da0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000da4:	8a9b      	ldrh	r3, [r3, #20]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	8293      	strh	r3, [r2, #20]

    lcd_transmit_byte(0xAE);  // Turn off display
 8000db4:	20ae      	movs	r0, #174	; 0xae
 8000db6:	f7ff fec1 	bl	8000b3c <lcd_transmit_byte>
    lcd_transmit_byte(0xA2);  // Set bias voltage to 1/9
 8000dba:	20a2      	movs	r0, #162	; 0xa2
 8000dbc:	f7ff febe 	bl	8000b3c <lcd_transmit_byte>

    lcd_transmit_byte(0xA0);  // Set display RAM address normal
 8000dc0:	20a0      	movs	r0, #160	; 0xa0
 8000dc2:	f7ff febb 	bl	8000b3c <lcd_transmit_byte>
    lcd_transmit_byte(0xC8);  // Set update direction
 8000dc6:	20c8      	movs	r0, #200	; 0xc8
 8000dc8:	f7ff feb8 	bl	8000b3c <lcd_transmit_byte>

    lcd_transmit_byte(0x22);  // Set internal resistor ratio
 8000dcc:	2022      	movs	r0, #34	; 0x22
 8000dce:	f7ff feb5 	bl	8000b3c <lcd_transmit_byte>
    lcd_transmit_byte(0x2F);  // Set operating mode
 8000dd2:	202f      	movs	r0, #47	; 0x2f
 8000dd4:	f7ff feb2 	bl	8000b3c <lcd_transmit_byte>
    lcd_transmit_byte(0x40);  // Set start line address
 8000dd8:	2040      	movs	r0, #64	; 0x40
 8000dda:	f7ff feaf 	bl	8000b3c <lcd_transmit_byte>

    lcd_transmit_byte(0xAF);  // Turn on display
 8000dde:	20af      	movs	r0, #175	; 0xaf
 8000de0:	f7ff feac 	bl	8000b3c <lcd_transmit_byte>

    lcd_transmit_byte(0x81);  // Set output voltage
 8000de4:	2081      	movs	r0, #129	; 0x81
 8000de6:	f7ff fea9 	bl	8000b3c <lcd_transmit_byte>
    lcd_transmit_byte(0x17);  // Set contrast
 8000dea:	2017      	movs	r0, #23
 8000dec:	f7ff fea6 	bl	8000b3c <lcd_transmit_byte>

    lcd_transmit_byte(0xA6);  // Set normal mode
 8000df0:	20a6      	movs	r0, #166	; 0xa6
 8000df2:	f7ff fea3 	bl	8000b3c <lcd_transmit_byte>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	48000400 	.word	0x48000400
 8000e04:	0005f36f 	.word	0x0005f36f

08000e08 <lcd_init>:

void lcd_init() {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
    // Enable Clocks
    RCC->AHBENR  |= 0x00020000 | 0x00040000;    // Enable Clock for GPIO Banks A and B
 8000e0c:	4b9d      	ldr	r3, [pc, #628]	; (8001084 <lcd_init+0x27c>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	4a9c      	ldr	r2, [pc, #624]	; (8001084 <lcd_init+0x27c>)
 8000e12:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 8000e16:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= 0x00004000;                 // Enable Clock for SPI2
 8000e18:	4b9a      	ldr	r3, [pc, #616]	; (8001084 <lcd_init+0x27c>)
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	4a99      	ldr	r2, [pc, #612]	; (8001084 <lcd_init+0x27c>)
 8000e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e22:	61d3      	str	r3, [r2, #28]

    // Connect pins to SPI2
    GPIOB->AFR[13 >> 0x03] &= ~(0x0000000F << ((13 & 0x00000007) * 4)); // Clear alternate function for PB13
 8000e24:	4b98      	ldr	r3, [pc, #608]	; (8001088 <lcd_init+0x280>)
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	4a97      	ldr	r2, [pc, #604]	; (8001088 <lcd_init+0x280>)
 8000e2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000e2e:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[13 >> 0x03] |=  (0x00000005 << ((13 & 0x00000007) * 4)); // Set alternate 5 function for PB13 - SCLK
 8000e30:	4b95      	ldr	r3, [pc, #596]	; (8001088 <lcd_init+0x280>)
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	4a94      	ldr	r2, [pc, #592]	; (8001088 <lcd_init+0x280>)
 8000e36:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000e3a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] &= ~(0x0000000F << ((15 & 0x00000007) * 4)); // Clear alternate function for PB15
 8000e3c:	4b92      	ldr	r3, [pc, #584]	; (8001088 <lcd_init+0x280>)
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	4a91      	ldr	r2, [pc, #580]	; (8001088 <lcd_init+0x280>)
 8000e42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000e46:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[15 >> 0x03] |=  (0x00000005 << ((15 & 0x00000007) * 4)); // Set alternate 5 function for PB15 - MOSI
 8000e48:	4b8f      	ldr	r3, [pc, #572]	; (8001088 <lcd_init+0x280>)
 8000e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4c:	4a8e      	ldr	r2, [pc, #568]	; (8001088 <lcd_init+0x280>)
 8000e4e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000e52:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure pins PB13 and PB15 for 10 MHz alternate function
    GPIOB->OSPEEDR &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear speed register
 8000e54:	4b8c      	ldr	r3, [pc, #560]	; (8001088 <lcd_init+0x280>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	4a8b      	ldr	r2, [pc, #556]	; (8001088 <lcd_init+0x280>)
 8000e5a:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8000e5e:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (13 * 2) | 0x00000001 << (15 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000e60:	4b89      	ldr	r3, [pc, #548]	; (8001088 <lcd_init+0x280>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	4a88      	ldr	r2, [pc, #544]	; (8001088 <lcd_init+0x280>)
 8000e66:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8000e6a:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (13)     | 0x0001     << (15));        // Clear output type register
 8000e6c:	4b86      	ldr	r3, [pc, #536]	; (8001088 <lcd_init+0x280>)
 8000e6e:	889b      	ldrh	r3, [r3, #4]
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4985      	ldr	r1, [pc, #532]	; (8001088 <lcd_init+0x280>)
 8000e74:	f645 73ff 	movw	r3, #24575	; 0x5fff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	808b      	strh	r3, [r1, #4]
    GPIOB->OTYPER  |=  (0x0000     << (13)     | 0x0000     << (15));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000e7e:	4a82      	ldr	r2, [pc, #520]	; (8001088 <lcd_init+0x280>)
 8000e80:	4b81      	ldr	r3, [pc, #516]	; (8001088 <lcd_init+0x280>)
 8000e82:	8892      	ldrh	r2, [r2, #4]
 8000e84:	b292      	uxth	r2, r2
 8000e86:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear mode register
 8000e88:	4b7f      	ldr	r3, [pc, #508]	; (8001088 <lcd_init+0x280>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a7e      	ldr	r2, [pc, #504]	; (8001088 <lcd_init+0x280>)
 8000e8e:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8000e92:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000002 << (13 * 2) | 0x00000002 << (15 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000e94:	4b7c      	ldr	r3, [pc, #496]	; (8001088 <lcd_init+0x280>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a7b      	ldr	r2, [pc, #492]	; (8001088 <lcd_init+0x280>)
 8000e9a:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 8000e9e:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (13 * 2) | 0x00000003 << (15 * 2));    // Clear push/pull register
 8000ea0:	4b79      	ldr	r3, [pc, #484]	; (8001088 <lcd_init+0x280>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	4a78      	ldr	r2, [pc, #480]	; (8001088 <lcd_init+0x280>)
 8000ea6:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8000eaa:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (13 * 2) | 0x00000000 << (15 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000eac:	4b76      	ldr	r3, [pc, #472]	; (8001088 <lcd_init+0x280>)
 8000eae:	4a76      	ldr	r2, [pc, #472]	; (8001088 <lcd_init+0x280>)
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	60d3      	str	r3, [r2, #12]

    // Initialize REEST, nCS, and A0
    // Configure pins PB6 and PB14 for 10 MHz output
    GPIOB->OSPEEDR &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear speed register
 8000eb4:	4b74      	ldr	r3, [pc, #464]	; (8001088 <lcd_init+0x280>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	4a73      	ldr	r2, [pc, #460]	; (8001088 <lcd_init+0x280>)
 8000eba:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8000ebe:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000ec0:	4b71      	ldr	r3, [pc, #452]	; (8001088 <lcd_init+0x280>)
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	4a70      	ldr	r2, [pc, #448]	; (8001088 <lcd_init+0x280>)
 8000ec6:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 8000eca:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER  &= ~(0x0001     << (6)     | 0x0001     << (14));        // Clear output type register
 8000ecc:	4b6e      	ldr	r3, [pc, #440]	; (8001088 <lcd_init+0x280>)
 8000ece:	889b      	ldrh	r3, [r3, #4]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	4a6d      	ldr	r2, [pc, #436]	; (8001088 <lcd_init+0x280>)
 8000ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	8093      	strh	r3, [r2, #4]
    GPIOB->OTYPER  |=  (0x0000     << (6)     | 0x0000     << (14));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000ee0:	4a69      	ldr	r2, [pc, #420]	; (8001088 <lcd_init+0x280>)
 8000ee2:	4b69      	ldr	r3, [pc, #420]	; (8001088 <lcd_init+0x280>)
 8000ee4:	8892      	ldrh	r2, [r2, #4]
 8000ee6:	b292      	uxth	r2, r2
 8000ee8:	809a      	strh	r2, [r3, #4]
    GPIOB->MODER   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear mode register
 8000eea:	4b67      	ldr	r3, [pc, #412]	; (8001088 <lcd_init+0x280>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a66      	ldr	r2, [pc, #408]	; (8001088 <lcd_init+0x280>)
 8000ef0:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8000ef4:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (0x00000001 << (6 * 2) | 0x00000001 << (14 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000ef6:	4b64      	ldr	r3, [pc, #400]	; (8001088 <lcd_init+0x280>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a63      	ldr	r2, [pc, #396]	; (8001088 <lcd_init+0x280>)
 8000efc:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
 8000f00:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(0x00000003 << (6 * 2) | 0x00000003 << (14 * 2));    // Clear push/pull register
 8000f02:	4b61      	ldr	r3, [pc, #388]	; (8001088 <lcd_init+0x280>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	4a60      	ldr	r2, [pc, #384]	; (8001088 <lcd_init+0x280>)
 8000f08:	f023 2330 	bic.w	r3, r3, #805318656	; 0x30003000
 8000f0c:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (0x00000000 << (6 * 2) | 0x00000000 << (14 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000f0e:	4b5e      	ldr	r3, [pc, #376]	; (8001088 <lcd_init+0x280>)
 8000f10:	4a5d      	ldr	r2, [pc, #372]	; (8001088 <lcd_init+0x280>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60d3      	str	r3, [r2, #12]
    // Configure pin PA8 for 10 MHz output
    GPIOA->OSPEEDR &= ~0x00000003 << (8 * 2);    // Clear speed register
 8000f16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f20:	0c9b      	lsrs	r3, r3, #18
 8000f22:	049b      	lsls	r3, r3, #18
 8000f24:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  0x00000001 << (8 * 2);    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000f26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~0x0001     << (8);        // Clear output type register
 8000f36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f3a:	889b      	ldrh	r3, [r3, #4]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f42:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000f46:	f023 0301 	bic.w	r3, r3, #1
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  0x0000     << (8);        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000f4e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f56:	8892      	ldrh	r2, [r2, #4]
 8000f58:	b292      	uxth	r2, r2
 8000f5a:	809a      	strh	r2, [r3, #4]


    GPIOA->MODER   &= ~0x00000003 << (8 * 2);    // Clear mode register
 8000f5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f66:	0c9b      	lsrs	r3, r3, #18
 8000f68:	049b      	lsls	r3, r3, #18
 8000f6a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  0x00000001 << (8 * 2);    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000f6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7a:	6013      	str	r3, [r2, #0]

    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // This is needed for UART to work. It makes no sense.
 8000f7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f8a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));
 8000f8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f96:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000f9a:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR   &= ~0x00000003 << (8 * 2);    // Clear push/pull register
 8000f9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fa6:	0c9b      	lsrs	r3, r3, #18
 8000fa8:	049b      	lsls	r3, r3, #18
 8000faa:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  0x00000000 << (8 * 2);    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000fac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fb0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	60d3      	str	r3, [r2, #12]

    GPIOB->ODR |=  (0x0001 << 6); // CS = 1
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <lcd_init+0x280>)
 8000fba:	8a9b      	ldrh	r3, [r3, #20]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4a32      	ldr	r2, [pc, #200]	; (8001088 <lcd_init+0x280>)
 8000fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	8293      	strh	r3, [r2, #20]

    // Configure SPI2
    SPI2->CR1 &= 0x3040; // Clear CR1 Register
 8000fc8:	4b30      	ldr	r3, [pc, #192]	; (800108c <lcd_init+0x284>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	4a2f      	ldr	r2, [pc, #188]	; (800108c <lcd_init+0x284>)
 8000fd0:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Configure direction (0x0000 - 2 Lines Full Duplex, 0x0400 - 2 Lines RX Only, 0x8000 - 1 Line RX, 0xC000 - 1 Line TX)
 8000fd8:	4a2c      	ldr	r2, [pc, #176]	; (800108c <lcd_init+0x284>)
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <lcd_init+0x284>)
 8000fdc:	8812      	ldrh	r2, [r2, #0]
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	801a      	strh	r2, [r3, #0]
    SPI2->CR1 |= 0x0104; // Configure mode (0x0000 - Slave, 0x0104 - Master)
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <lcd_init+0x284>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	4a28      	ldr	r2, [pc, #160]	; (800108c <lcd_init+0x284>)
 8000fea:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0002; // Configure clock polarity (0x0000 - Low, 0x0002 - High)
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <lcd_init+0x284>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	4a24      	ldr	r2, [pc, #144]	; (800108c <lcd_init+0x284>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0001; // Configure clock phase (0x0000 - 1 Edge, 0x0001 - 2 Edge)
 8001002:	4b22      	ldr	r3, [pc, #136]	; (800108c <lcd_init+0x284>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	4a20      	ldr	r2, [pc, #128]	; (800108c <lcd_init+0x284>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	b29b      	uxth	r3, r3
 8001010:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0200; // Configure chip select (0x0000 - Hardware based, 0x0200 - Software based)
 8001012:	4b1e      	ldr	r3, [pc, #120]	; (800108c <lcd_init+0x284>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	b29b      	uxth	r3, r3
 8001018:	4a1c      	ldr	r2, [pc, #112]	; (800108c <lcd_init+0x284>)
 800101a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101e:	b29b      	uxth	r3, r3
 8001020:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0008; // Set Baud Rate Prescaler (0x0000 - 2, 0x0008 - 4, 0x0018 - 8, 0x0020 - 16, 0x0028 - 32, 0x0028 - 64, 0x0030 - 128, 0x0038 - 128)
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <lcd_init+0x284>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	b29b      	uxth	r3, r3
 8001028:	4a18      	ldr	r2, [pc, #96]	; (800108c <lcd_init+0x284>)
 800102a:	f043 0308 	orr.w	r3, r3, #8
 800102e:	b29b      	uxth	r3, r3
 8001030:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= 0x0000; // Set Bit Order (0x0000 - MSB First, 0x0080 - LSB First)
 8001032:	4a16      	ldr	r2, [pc, #88]	; (800108c <lcd_init+0x284>)
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <lcd_init+0x284>)
 8001036:	8812      	ldrh	r2, [r2, #0]
 8001038:	b292      	uxth	r2, r2
 800103a:	801a      	strh	r2, [r3, #0]
    SPI2->CR2 &= ~0x0F00; // Clear CR2 Register
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <lcd_init+0x284>)
 800103e:	889b      	ldrh	r3, [r3, #4]
 8001040:	b29b      	uxth	r3, r3
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <lcd_init+0x284>)
 8001044:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001048:	b29b      	uxth	r3, r3
 800104a:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x0700; // Set Number of Bits (0x0300 - 4, 0x0400 - 5, 0x0500 - 6, ...);
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <lcd_init+0x284>)
 800104e:	889b      	ldrh	r3, [r3, #4]
 8001050:	b29b      	uxth	r3, r3
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <lcd_init+0x284>)
 8001054:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001058:	b29b      	uxth	r3, r3
 800105a:	8093      	strh	r3, [r2, #4]
    SPI2->I2SCFGR &= ~0x0800; // Disable I2S
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <lcd_init+0x284>)
 800105e:	8b9b      	ldrh	r3, [r3, #28]
 8001060:	b29b      	uxth	r3, r3
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <lcd_init+0x284>)
 8001064:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001068:	b29b      	uxth	r3, r3
 800106a:	8393      	strh	r3, [r2, #28]
    SPI2->CRCPR = 7; // Set CRC polynomial order
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <lcd_init+0x284>)
 800106e:	2207      	movs	r2, #7
 8001070:	821a      	strh	r2, [r3, #16]
    SPI2->CR2 &= ~0x1000;
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <lcd_init+0x284>)
 8001074:	889b      	ldrh	r3, [r3, #4]
 8001076:	b29b      	uxth	r3, r3
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <lcd_init+0x284>)
 800107a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800107e:	b29b      	uxth	r3, r3
 8001080:	e006      	b.n	8001090 <lcd_init+0x288>
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000
 8001088:	48000400 	.word	0x48000400
 800108c:	40003800 	.word	0x40003800
 8001090:	8093      	strh	r3, [r2, #4]
    SPI2->CR2 |= 0x1000; // Configure RXFIFO return at (0x0000 - Half-full (16 bits), 0x1000 - Quarter-full (8 bits))
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <lcd_init+0x2b4>)
 8001094:	889b      	ldrh	r3, [r3, #4]
 8001096:	b29b      	uxth	r3, r3
 8001098:	4a08      	ldr	r2, [pc, #32]	; (80010bc <lcd_init+0x2b4>)
 800109a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800109e:	b29b      	uxth	r3, r3
 80010a0:	8093      	strh	r3, [r2, #4]
    SPI2->CR1 |= 0x0040; // Enable SPI2
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <lcd_init+0x2b4>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <lcd_init+0x2b4>)
 80010aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	8013      	strh	r3, [r2, #0]

    lcd_reset();
 80010b2:	f7ff fe39 	bl	8000d28 <lcd_reset>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40003800 	.word	0x40003800

080010c0 <led_init>:
#include "hal.h"


void led_init() {
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
	// Enable clock for used ports
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 80010c4:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <led_init+0x128>)
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	4a47      	ldr	r2, [pc, #284]	; (80011e8 <led_init+0x128>)
 80010ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ce:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 80010d0:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <led_init+0x128>)
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	4a44      	ldr	r2, [pc, #272]	; (80011e8 <led_init+0x128>)
 80010d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010da:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 80010dc:	4b42      	ldr	r3, [pc, #264]	; (80011e8 <led_init+0x128>)
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	4a41      	ldr	r2, [pc, #260]	; (80011e8 <led_init+0x128>)
 80010e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010e6:	6153      	str	r3, [r2, #20]


	// Reset and set PB4 speed register (red)
	GPIOB->OSPEEDR &= ~(0x00000003 << (4 * 2));
 80010e8:	4b40      	ldr	r3, [pc, #256]	; (80011ec <led_init+0x12c>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4a3f      	ldr	r2, [pc, #252]	; (80011ec <led_init+0x12c>)
 80010ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010f2:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (4 * 2));
 80010f4:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <led_init+0x12c>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4a3c      	ldr	r2, [pc, #240]	; (80011ec <led_init+0x12c>)
 80010fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010fe:	6093      	str	r3, [r2, #8]

	// Reset and set PB4 type register (red)
	GPIOB->OTYPER &= ~(0x0001 << (4));
 8001100:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <led_init+0x12c>)
 8001102:	889b      	ldrh	r3, [r3, #4]
 8001104:	b29b      	uxth	r3, r3
 8001106:	4a39      	ldr	r2, [pc, #228]	; (80011ec <led_init+0x12c>)
 8001108:	f023 0310 	bic.w	r3, r3, #16
 800110c:	b29b      	uxth	r3, r3
 800110e:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0x0000 << (4));
 8001110:	4a36      	ldr	r2, [pc, #216]	; (80011ec <led_init+0x12c>)
 8001112:	4b36      	ldr	r3, [pc, #216]	; (80011ec <led_init+0x12c>)
 8001114:	8892      	ldrh	r2, [r2, #4]
 8001116:	b292      	uxth	r2, r2
 8001118:	809a      	strh	r2, [r3, #4]

	// Reset and set PB4 mode register (red)
	GPIOB->MODER &= ~(0x00000003 << (4 * 2));
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <led_init+0x12c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a33      	ldr	r2, [pc, #204]	; (80011ec <led_init+0x12c>)
 8001120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001124:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000001 << (4 * 2));
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <led_init+0x12c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a30      	ldr	r2, [pc, #192]	; (80011ec <led_init+0x12c>)
 800112c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001130:	6013      	str	r3, [r2, #0]


	// Reset and set PC7 speed register (green)
	GPIOC->OSPEEDR &= ~(0x00000003 << (7 * 2));
 8001132:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <led_init+0x130>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	4a2e      	ldr	r2, [pc, #184]	; (80011f0 <led_init+0x130>)
 8001138:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800113c:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= (0x00000002 << (7 * 2));
 800113e:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <led_init+0x130>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	4a2b      	ldr	r2, [pc, #172]	; (80011f0 <led_init+0x130>)
 8001144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001148:	6093      	str	r3, [r2, #8]

	// Reset and set PC7 type register (green)
	GPIOC->OTYPER &= ~(0x0001 << (7));
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <led_init+0x130>)
 800114c:	889b      	ldrh	r3, [r3, #4]
 800114e:	b29b      	uxth	r3, r3
 8001150:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <led_init+0x130>)
 8001152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001156:	b29b      	uxth	r3, r3
 8001158:	8093      	strh	r3, [r2, #4]
	GPIOC->OTYPER |= (0x0000 << (7));
 800115a:	4a25      	ldr	r2, [pc, #148]	; (80011f0 <led_init+0x130>)
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <led_init+0x130>)
 800115e:	8892      	ldrh	r2, [r2, #4]
 8001160:	b292      	uxth	r2, r2
 8001162:	809a      	strh	r2, [r3, #4]

	// Reset and set PC7 mode register (green)
	GPIOC->MODER &= ~(0x00000003 << (7 * 2));
 8001164:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <led_init+0x130>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a21      	ldr	r2, [pc, #132]	; (80011f0 <led_init+0x130>)
 800116a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800116e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000001 << (7 * 2));
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <led_init+0x130>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <led_init+0x130>)
 8001176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117a:	6013      	str	r3, [r2, #0]


	// Reset and set PA9 speed register (blue)
	GPIOA->OSPEEDR &= ~(0x00000003 << (9 * 2));
 800117c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001186:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800118a:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x00000002 << (9 * 2));
 800118c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800119a:	6093      	str	r3, [r2, #8]

	// Reset and set PB4 type register (blue)
	GPIOA->OTYPER &= ~(0x0001 << (9));
 800119c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011a0:	889b      	ldrh	r3, [r3, #4]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	8093      	strh	r3, [r2, #4]
	GPIOA->OTYPER |= (0x0000 << (9));
 80011b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011b8:	8892      	ldrh	r2, [r2, #4]
 80011ba:	b292      	uxth	r2, r2
 80011bc:	809a      	strh	r2, [r3, #4]

	// Reset and set PB4 mode register (blue)
	GPIOA->MODER &= ~(0x00000003 << (9 * 2));
 80011be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011c8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80011cc:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000001 << (9 * 2));
 80011ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011dc:	6013      	str	r3, [r2, #0]

}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40021000 	.word	0x40021000
 80011ec:	48000400 	.word	0x48000400
 80011f0:	48000800 	.word	0x48000800

080011f4 <lcd_write_line>:
 *      Author: asbjorn
 */
#include "lcd.h"


void lcd_write_line(uint8_t buffer[], lcd_text_t * text) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	uint16_t lineoffset;
	uint8_t charoffset = text->column;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	791b      	ldrb	r3, [r3, #4]
 8001202:	73fb      	strb	r3, [r7, #15]
	uint8_t current_char = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	73bb      	strb	r3, [r7, #14]
	uint8_t len = strlen(text->content);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7fe ffdb 	bl	80001c8 <strlen>
 8001212:	4603      	mov	r3, r0
 8001214:	737b      	strb	r3, [r7, #13]
	if (text->row > 3) {
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	795b      	ldrb	r3, [r3, #5]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d903      	bls.n	8001226 <lcd_write_line+0x32>
		lineoffset = 3<<7;
 800121e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001222:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001224:	e004      	b.n	8001230 <lcd_write_line+0x3c>
	} else {
		lineoffset = text->row<<7;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	795b      	ldrb	r3, [r3, #5]
 800122a:	b29b      	uxth	r3, r3
 800122c:	01db      	lsls	r3, r3, #7
 800122e:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	for (int i = 0; i < charoffset; i++) {
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
 8001234:	e01a      	b.n	800126c <lcd_write_line+0x78>
		current_char = i*5;
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	4413      	add	r3, r2
 8001240:	73bb      	strb	r3, [r7, #14]
		for (int j = 0; j < 5; j++) {
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	e00b      	b.n	8001260 <lcd_write_line+0x6c>
			*(buffer + lineoffset + current_char + j) = 0x00;
 8001248:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	441a      	add	r2, r3
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	4413      	add	r3, r2
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 5; j++) {
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3301      	adds	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b04      	cmp	r3, #4
 8001264:	ddf0      	ble.n	8001248 <lcd_write_line+0x54>
	for (int i = 0; i < charoffset; i++) {
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	3301      	adds	r3, #1
 800126a:	623b      	str	r3, [r7, #32]
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	6a3a      	ldr	r2, [r7, #32]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbe0      	blt.n	8001236 <lcd_write_line+0x42>
		}
	}

	for (int k = 0; k < 25; k++) {
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	e032      	b.n	80012e0 <lcd_write_line+0xec>
		current_char = k*5 + charoffset;
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	461a      	mov	r2, r3
 8001280:	0092      	lsls	r2, r2, #2
 8001282:	4413      	add	r3, r2
 8001284:	b2da      	uxtb	r2, r3
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	4413      	add	r3, r2
 800128a:	73bb      	strb	r3, [r7, #14]
		for (int l = 0; l < 5; l++) {
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e020      	b.n	80012d4 <lcd_write_line+0xe0>
			*(buffer + lineoffset + current_char + l) = k < len ? character_data[text->content[k] - 0x20][l] : 0x00;
 8001292:	7b7b      	ldrb	r3, [r7, #13]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	429a      	cmp	r2, r3
 8001298:	da0f      	bge.n	80012ba <lcd_write_line+0xc6>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	f1a3 0220 	sub.w	r2, r3, #32
 80012a8:	491a      	ldr	r1, [pc, #104]	; (8001314 <lcd_write_line+0x120>)
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	18ca      	adds	r2, r1, r3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	4413      	add	r3, r2
 80012b6:	7819      	ldrb	r1, [r3, #0]
 80012b8:	e000      	b.n	80012bc <lcd_write_line+0xc8>
 80012ba:	2100      	movs	r1, #0
 80012bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	441a      	add	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	4413      	add	r3, r2
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	460a      	mov	r2, r1
 80012cc:	701a      	strb	r2, [r3, #0]
		for (int l = 0; l < 5; l++) {
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3301      	adds	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	dddb      	ble.n	8001292 <lcd_write_line+0x9e>
	for (int k = 0; k < 25; k++) {
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	3301      	adds	r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2b18      	cmp	r3, #24
 80012e4:	ddc9      	ble.n	800127a <lcd_write_line+0x86>
		}
	}

	for (int m = 0; m < 3; m++) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	e00a      	b.n	8001302 <lcd_write_line+0x10e>
		*(buffer + lineoffset + 125 + m) = 0x00;
 80012ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4413      	add	r3, r2
 80012f2:	337d      	adds	r3, #125	; 0x7d
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
	for (int m = 0; m < 3; m++) {
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	3301      	adds	r3, #1
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	2b02      	cmp	r3, #2
 8001306:	ddf1      	ble.n	80012ec <lcd_write_line+0xf8>
	}


}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	; 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	080021c8 	.word	0x080021c8

08001318 <lcd_write_string>:

void lcd_write_string(uint8_t* fb, lcd_text_t* t) {
 8001318:	b490      	push	{r4, r7}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
	uint8_t current_column = t->column;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	791b      	ldrb	r3, [r3, #4]
 8001326:	73fb      	strb	r3, [r7, #15]
	uint8_t char_offset = t->scroll_offset/5;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	891b      	ldrh	r3, [r3, #8]
 800132c:	4a2a      	ldr	r2, [pc, #168]	; (80013d8 <lcd_write_string+0xc0>)
 800132e:	fba2 2303 	umull	r2, r3, r2, r3
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	b29b      	uxth	r3, r3
 8001336:	73bb      	strb	r3, [r7, #14]
	uint8_t count_to_five = t->scroll_offset % 5;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	891a      	ldrh	r2, [r3, #8]
 800133c:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <lcd_write_string+0xc0>)
 800133e:	fba3 1302 	umull	r1, r3, r3, r2
 8001342:	0899      	lsrs	r1, r3, #2
 8001344:	460b      	mov	r3, r1
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	b29b      	uxth	r3, r3
 800134e:	737b      	strb	r3, [r7, #13]

	fb += t->row<<7;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	795b      	ldrb	r3, [r3, #5]
 8001354:	01db      	lsls	r3, r3, #7
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	607b      	str	r3, [r7, #4]

	for (uint8_t i = 0; i <t->text_width; i++) {
 800135e:	2300      	movs	r3, #0
 8001360:	733b      	strb	r3, [r7, #12]
 8001362:	e02c      	b.n	80013be <lcd_write_string+0xa6>
		*(fb+current_column) = character_data[(*(t->content+char_offset))-0x20][count_to_five];
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	7bbb      	ldrb	r3, [r7, #14]
 800136a:	4413      	add	r3, r2
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	f1a3 0220 	sub.w	r2, r3, #32
 8001372:	7b78      	ldrb	r0, [r7, #13]
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4419      	add	r1, r3
 800137a:	4c18      	ldr	r4, [pc, #96]	; (80013dc <lcd_write_string+0xc4>)
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	4423      	add	r3, r4
 8001384:	4403      	add	r3, r0
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	700b      	strb	r3, [r1, #0]

		count_to_five++;
 800138a:	7b7b      	ldrb	r3, [r7, #13]
 800138c:	3301      	adds	r3, #1
 800138e:	737b      	strb	r3, [r7, #13]
		if (count_to_five == 5) {
 8001390:	7b7b      	ldrb	r3, [r7, #13]
 8001392:	2b05      	cmp	r3, #5
 8001394:	d10d      	bne.n	80013b2 <lcd_write_string+0x9a>
			count_to_five = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	737b      	strb	r3, [r7, #13]
			char_offset++;
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	3301      	adds	r3, #1
 800139e:	73bb      	strb	r3, [r7, #14]
			if (!*(t->content+char_offset)) {
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	4413      	add	r3, r2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <lcd_write_string+0x9a>
				char_offset = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73bb      	strb	r3, [r7, #14]
			}
		}
		current_column++;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	3301      	adds	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i <t->text_width; i++) {
 80013b8:	7b3b      	ldrb	r3, [r7, #12]
 80013ba:	3301      	adds	r3, #1
 80013bc:	733b      	strb	r3, [r7, #12]
 80013be:	7b3b      	ldrb	r3, [r7, #12]
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	88db      	ldrh	r3, [r3, #6]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d3cc      	bcc.n	8001364 <lcd_write_string+0x4c>
	}
}
 80013ca:	bf00      	nop
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc90      	pop	{r4, r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	cccccccd 	.word	0xcccccccd
 80013dc:	080021c8 	.word	0x080021c8

080013e0 <lcd_init_text>:


void lcd_init_text(lcd_text_t* text, char* content, uint8_t column, uint8_t row, uint16_t text_width) {
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	4611      	mov	r1, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	460b      	mov	r3, r1
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	4613      	mov	r3, r2
 80013f4:	71bb      	strb	r3, [r7, #6]
    text->scroll_offset = 0;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	811a      	strh	r2, [r3, #8]
    text->content = content;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	601a      	str	r2, [r3, #0]
    text->column = column;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	79fa      	ldrb	r2, [r7, #7]
 8001406:	711a      	strb	r2, [r3, #4]
    text->row = row;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	79ba      	ldrb	r2, [r7, #6]
 800140c:	715a      	strb	r2, [r3, #5]
    text->text_width = text_width;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	8b3a      	ldrh	r2, [r7, #24]
 8001412:	80da      	strh	r2, [r3, #6]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <lcd_scroll_text>:

void lcd_scroll_text(lcd_text_t* text) {
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    text->scroll_offset++;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	891b      	ldrh	r3, [r3, #8]
 800142c:	3301      	adds	r3, #1
 800142e:	b29a      	uxth	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	811a      	strh	r2, [r3, #8]
    if (text->scroll_offset == strlen(text->content)*5)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	891b      	ldrh	r3, [r3, #8]
 8001438:	461c      	mov	r4, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe fec2 	bl	80001c8 <strlen>
 8001444:	4602      	mov	r2, r0
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	429c      	cmp	r4, r3
 800144e:	d102      	bne.n	8001456 <lcd_scroll_text+0x36>
        text->scroll_offset = 0;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	811a      	strh	r2, [r3, #8]

}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}
	...

08001460 <NVIC_EnableIRQ>:
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	2201      	movs	r2, #1
 8001472:	fa02 f103 	lsl.w	r1, r2, r3
 8001476:	4a06      	ldr	r2, [pc, #24]	; (8001490 <NVIC_EnableIRQ+0x30>)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	095b      	lsrs	r3, r3, #5
 800147e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e100 	.word	0xe000e100

08001494 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	da0b      	bge.n	80014c0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <NVIC_SetPriority+0x4c>)
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	3b04      	subs	r3, #4
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80014be:	e009      	b.n	80014d4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4907      	ldr	r1, [pc, #28]	; (80014e4 <NVIC_SetPriority+0x50>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <main>:
void initTimer();

volatile uint8_t flag = 0;

int main(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80014ee:	af02      	add	r7, sp, #8
	// Initialise hardware
	uart_init(9600);
 80014f0:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80014f4:	f7ff fa08 	bl	8000908 <uart_init>
	led_init();
 80014f8:	f7ff fde2 	bl	80010c0 <led_init>
	lcd_init();
 80014fc:	f7ff fc84 	bl	8000e08 <lcd_init>
	initTimer();
 8001500:	f000 f874 	bl	80015ec <initTimer>

	// Declare LCD buffer
	uint8_t lcd_buffer[512];
	memset(lcd_buffer, 0x00, 512);
 8001504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f9f4 	bl	80018fc <memset>

	lcd_text_t line_text;
	lcd_init_text(&line_text, "Write line here", 4, 0, 8);
 8001514:	f107 001c 	add.w	r0, r7, #28
 8001518:	2308      	movs	r3, #8
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2300      	movs	r3, #0
 800151e:	2204      	movs	r2, #4
 8001520:	4924      	ldr	r1, [pc, #144]	; (80015b4 <main+0xcc>)
 8001522:	f7ff ff5d 	bl	80013e0 <lcd_init_text>
	lcd_write_line(lcd_buffer, &line_text);
 8001526:	f107 021c 	add.w	r2, r7, #28
 800152a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fe5f 	bl	80011f4 <lcd_write_line>

	lcd_text_t write_str_text;
	lcd_init_text(&write_str_text, "Write str test", 2, 1, 8*5);
 8001536:	f107 0010 	add.w	r0, r7, #16
 800153a:	2328      	movs	r3, #40	; 0x28
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2301      	movs	r3, #1
 8001540:	2202      	movs	r2, #2
 8001542:	491d      	ldr	r1, [pc, #116]	; (80015b8 <main+0xd0>)
 8001544:	f7ff ff4c 	bl	80013e0 <lcd_init_text>
	lcd_write_string(lcd_buffer, &write_str_text);
 8001548:	f107 0210 	add.w	r2, r7, #16
 800154c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fee0 	bl	8001318 <lcd_write_string>

	lcd_text_t scroll_text;
	lcd_init_text(&scroll_text, "SCROLLING", 5, 2, 5*5);
 8001558:	1d38      	adds	r0, r7, #4
 800155a:	2319      	movs	r3, #25
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2302      	movs	r3, #2
 8001560:	2205      	movs	r2, #5
 8001562:	4916      	ldr	r1, [pc, #88]	; (80015bc <main+0xd4>)
 8001564:	f7ff ff3c 	bl	80013e0 <lcd_init_text>

	lcd_write_string(lcd_buffer, &scroll_text);
 8001568:	1d3a      	adds	r2, r7, #4
 800156a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fed1 	bl	8001318 <lcd_write_string>
	lcd_push_buffer(lcd_buffer);
 8001576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fb10 	bl	8000ba0 <lcd_push_buffer>

	while(1){
		if (flag) {
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <main+0xd8>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0fa      	beq.n	8001580 <main+0x98>
			lcd_write_string(lcd_buffer, &scroll_text);
 800158a:	1d3a      	adds	r2, r7, #4
 800158c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fec0 	bl	8001318 <lcd_write_string>
			lcd_scroll_text(&scroll_text);
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff40 	bl	8001420 <lcd_scroll_text>
			lcd_push_buffer(lcd_buffer);
 80015a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fafb 	bl	8000ba0 <lcd_push_buffer>
			flag = 0;
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <main+0xd8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
		if (flag) {
 80015b0:	e7e6      	b.n	8001580 <main+0x98>
 80015b2:	bf00      	nop
 80015b4:	0800219c 	.word	0x0800219c
 80015b8:	080021ac 	.word	0x080021ac
 80015bc:	080021bc 	.word	0x080021bc
 80015c0:	200001af 	.word	0x200001af

080015c4 <TIM1_BRK_TIM15_IRQHandler>:
		}
	}
}


void TIM1_BRK_TIM15_IRQHandler(void) {
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
	flag = 1;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]

	// Clear interrupt bit (requried in all interrupts to avoid loop)
	TIM15->SR &= ~0x0001;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6113      	str	r3, [r2, #16]
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	200001af 	.word	0x200001af
 80015e8:	40014000 	.word	0x40014000

080015ec <initTimer>:


void initTimer() {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2Periph_TIM15;
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <initTimer+0x54>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a12      	ldr	r2, [pc, #72]	; (8001640 <initTimer+0x54>)
 80015f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fa:	6193      	str	r3, [r2, #24]

	// Configure timer 15 and disable timer
 	TIM15->CR1 = 0x0000;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <initTimer+0x58>)
 80015fe:	2200      	movs	r2, #0
 8001600:	801a      	strh	r2, [r3, #0]

 	// Configure reload value and prescaler
	TIM15->ARR = 0xFA00;
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <initTimer+0x58>)
 8001604:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM15->PSC = 0x63;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <initTimer+0x58>)
 800160c:	2263      	movs	r2, #99	; 0x63
 800160e:	851a      	strh	r2, [r3, #40]	; 0x28

	// Enable interrupt
	TIM15->DIER |= 0x0001;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <initTimer+0x58>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <initTimer+0x58>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	60d3      	str	r3, [r2, #12]

	// Enable interrupt in NVIC
	NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0);
 800161c:	2100      	movs	r1, #0
 800161e:	2018      	movs	r0, #24
 8001620:	f7ff ff38 	bl	8001494 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001624:	2018      	movs	r0, #24
 8001626:	f7ff ff1b 	bl	8001460 <NVIC_EnableIRQ>

	// Enable timer
	TIM15->CR1 |= 0x0001;
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <initTimer+0x58>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <initTimer+0x58>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	b29b      	uxth	r3, r3
 8001638:	8013      	strh	r3, [r2, #0]

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	40014000 	.word	0x40014000

08001648 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	e00a      	b.n	8001670 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800165a:	f3af 8000 	nop.w
 800165e:	4601      	mov	r1, r0
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	60ba      	str	r2, [r7, #8]
 8001666:	b2ca      	uxtb	r2, r1
 8001668:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf0      	blt.n	800165a <_read+0x12>
	}

return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
	return -1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016aa:	605a      	str	r2, [r3, #4]
	return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
	return 0;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <_sbrk+0x50>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x16>
		heap_end = &end;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <_sbrk+0x50>)
 80016e6:	4a10      	ldr	r2, [pc, #64]	; (8001728 <_sbrk+0x54>)
 80016e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <_sbrk+0x50>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <_sbrk+0x50>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	466a      	mov	r2, sp
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d907      	bls.n	800170e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80016fe:	f000 f8d3 	bl	80018a8 <__errno>
 8001702:	4603      	mov	r3, r0
 8001704:	220c      	movs	r2, #12
 8001706:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800170c:	e006      	b.n	800171c <_sbrk+0x48>
	}

	heap_end += incr;
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <_sbrk+0x50>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a03      	ldr	r2, [pc, #12]	; (8001724 <_sbrk+0x50>)
 8001718:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200001b0 	.word	0x200001b0
 8001728:	200001c8 	.word	0x200001c8

0800172c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001730:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <SystemInit+0x84>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001736:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <SystemInit+0x84>)
 8001738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800173c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <SystemInit+0x88>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a1b      	ldr	r2, [pc, #108]	; (80017b4 <SystemInit+0x88>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <SystemInit+0x88>)
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4918      	ldr	r1, [pc, #96]	; (80017b4 <SystemInit+0x88>)
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <SystemInit+0x8c>)
 8001754:	4013      	ands	r3, r2
 8001756:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <SystemInit+0x88>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a15      	ldr	r2, [pc, #84]	; (80017b4 <SystemInit+0x88>)
 800175e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <SystemInit+0x88>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <SystemInit+0x88>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <SystemInit+0x88>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <SystemInit+0x88>)
 800177a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800177e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <SystemInit+0x88>)
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <SystemInit+0x88>)
 8001786:	f023 030f 	bic.w	r3, r3, #15
 800178a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <SystemInit+0x88>)
 800178e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001790:	4908      	ldr	r1, [pc, #32]	; (80017b4 <SystemInit+0x88>)
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <SystemInit+0x90>)
 8001794:	4013      	ands	r3, r2
 8001796:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <SystemInit+0x88>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800179e:	f000 f80f 	bl	80017c0 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80017a2:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <SystemInit+0x84>)
 80017a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017a8:	609a      	str	r2, [r3, #8]
#endif  
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00
 80017b4:	40021000 	.word	0x40021000
 80017b8:	f87fc00c 	.word	0xf87fc00c
 80017bc:	ff00fccc 	.word	0xff00fccc

080017c0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <SetSysClock+0x8c>)
 80017c6:	2212      	movs	r2, #18
 80017c8:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80017ca:	4b21      	ldr	r3, [pc, #132]	; (8001850 <SetSysClock+0x90>)
 80017cc:	4a20      	ldr	r2, [pc, #128]	; (8001850 <SetSysClock+0x90>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <SetSysClock+0x90>)
 80017d4:	4a1e      	ldr	r2, [pc, #120]	; (8001850 <SetSysClock+0x90>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <SetSysClock+0x90>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4a1c      	ldr	r2, [pc, #112]	; (8001850 <SetSysClock+0x90>)
 80017e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e4:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <SetSysClock+0x90>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4a19      	ldr	r2, [pc, #100]	; (8001850 <SetSysClock+0x90>)
 80017ec:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80017f0:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <SetSysClock+0x90>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a16      	ldr	r2, [pc, #88]	; (8001850 <SetSysClock+0x90>)
 80017f8:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80017fc:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <SetSysClock+0x90>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a13      	ldr	r2, [pc, #76]	; (8001850 <SetSysClock+0x90>)
 8001804:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001808:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800180a:	bf00      	nop
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <SetSysClock+0x90>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f9      	beq.n	800180c <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001818:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <SetSysClock+0x90>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <SetSysClock+0x90>)
 800181e:	f023 0303 	bic.w	r3, r3, #3
 8001822:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <SetSysClock+0x90>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4a09      	ldr	r2, [pc, #36]	; (8001850 <SetSysClock+0x90>)
 800182a:	f043 0302 	orr.w	r3, r3, #2
 800182e:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001830:	bf00      	nop
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <SetSysClock+0x90>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b08      	cmp	r3, #8
 800183c:	d1f9      	bne.n	8001832 <SetSysClock+0x72>
  {
  }
}
 800183e:	bf00      	nop
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40022000 	.word	0x40022000
 8001850:	40021000 	.word	0x40021000

08001854 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001854:	480d      	ldr	r0, [pc, #52]	; (800188c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001856:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001858:	480d      	ldr	r0, [pc, #52]	; (8001890 <LoopForever+0x6>)
  ldr r1, =_edata
 800185a:	490e      	ldr	r1, [pc, #56]	; (8001894 <LoopForever+0xa>)
  ldr r2, =_sidata
 800185c:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <LoopForever+0xe>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0b      	ldr	r2, [pc, #44]	; (800189c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001870:	4c0b      	ldr	r4, [pc, #44]	; (80018a0 <LoopForever+0x16>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800187e:	f7ff ff55 	bl	800172c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001882:	f000 f817 	bl	80018b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001886:	f7ff fe2f 	bl	80014e8 <main>

0800188a <LoopForever>:

LoopForever:
    b LoopForever
 800188a:	e7fe      	b.n	800188a <LoopForever>
  ldr   r0, =_estack
 800188c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001898:	08002410 	.word	0x08002410
  ldr r2, =_sbss
 800189c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80018a0:	200001c4 	.word	0x200001c4

080018a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC1_2_IRQHandler>
	...

080018a8 <__errno>:
 80018a8:	4b01      	ldr	r3, [pc, #4]	; (80018b0 <__errno+0x8>)
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2000002c 	.word	0x2000002c

080018b4 <__libc_init_array>:
 80018b4:	b570      	push	{r4, r5, r6, lr}
 80018b6:	4d0d      	ldr	r5, [pc, #52]	; (80018ec <__libc_init_array+0x38>)
 80018b8:	4c0d      	ldr	r4, [pc, #52]	; (80018f0 <__libc_init_array+0x3c>)
 80018ba:	1b64      	subs	r4, r4, r5
 80018bc:	10a4      	asrs	r4, r4, #2
 80018be:	2600      	movs	r6, #0
 80018c0:	42a6      	cmp	r6, r4
 80018c2:	d109      	bne.n	80018d8 <__libc_init_array+0x24>
 80018c4:	4d0b      	ldr	r5, [pc, #44]	; (80018f4 <__libc_init_array+0x40>)
 80018c6:	4c0c      	ldr	r4, [pc, #48]	; (80018f8 <__libc_init_array+0x44>)
 80018c8:	f000 fc5c 	bl	8002184 <_init>
 80018cc:	1b64      	subs	r4, r4, r5
 80018ce:	10a4      	asrs	r4, r4, #2
 80018d0:	2600      	movs	r6, #0
 80018d2:	42a6      	cmp	r6, r4
 80018d4:	d105      	bne.n	80018e2 <__libc_init_array+0x2e>
 80018d6:	bd70      	pop	{r4, r5, r6, pc}
 80018d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80018dc:	4798      	blx	r3
 80018de:	3601      	adds	r6, #1
 80018e0:	e7ee      	b.n	80018c0 <__libc_init_array+0xc>
 80018e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e6:	4798      	blx	r3
 80018e8:	3601      	adds	r6, #1
 80018ea:	e7f2      	b.n	80018d2 <__libc_init_array+0x1e>
 80018ec:	08002408 	.word	0x08002408
 80018f0:	08002408 	.word	0x08002408
 80018f4:	08002408 	.word	0x08002408
 80018f8:	0800240c 	.word	0x0800240c

080018fc <memset>:
 80018fc:	4402      	add	r2, r0
 80018fe:	4603      	mov	r3, r0
 8001900:	4293      	cmp	r3, r2
 8001902:	d100      	bne.n	8001906 <memset+0xa>
 8001904:	4770      	bx	lr
 8001906:	f803 1b01 	strb.w	r1, [r3], #1
 800190a:	e7f9      	b.n	8001900 <memset+0x4>

0800190c <setbuf>:
 800190c:	2900      	cmp	r1, #0
 800190e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001912:	bf0c      	ite	eq
 8001914:	2202      	moveq	r2, #2
 8001916:	2200      	movne	r2, #0
 8001918:	f000 b800 	b.w	800191c <setvbuf>

0800191c <setvbuf>:
 800191c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001920:	461d      	mov	r5, r3
 8001922:	4b5d      	ldr	r3, [pc, #372]	; (8001a98 <setvbuf+0x17c>)
 8001924:	681f      	ldr	r7, [r3, #0]
 8001926:	4604      	mov	r4, r0
 8001928:	460e      	mov	r6, r1
 800192a:	4690      	mov	r8, r2
 800192c:	b127      	cbz	r7, 8001938 <setvbuf+0x1c>
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	b913      	cbnz	r3, 8001938 <setvbuf+0x1c>
 8001932:	4638      	mov	r0, r7
 8001934:	f000 f9d2 	bl	8001cdc <__sinit>
 8001938:	4b58      	ldr	r3, [pc, #352]	; (8001a9c <setvbuf+0x180>)
 800193a:	429c      	cmp	r4, r3
 800193c:	d167      	bne.n	8001a0e <setvbuf+0xf2>
 800193e:	687c      	ldr	r4, [r7, #4]
 8001940:	f1b8 0f02 	cmp.w	r8, #2
 8001944:	d006      	beq.n	8001954 <setvbuf+0x38>
 8001946:	f1b8 0f01 	cmp.w	r8, #1
 800194a:	f200 809f 	bhi.w	8001a8c <setvbuf+0x170>
 800194e:	2d00      	cmp	r5, #0
 8001950:	f2c0 809c 	blt.w	8001a8c <setvbuf+0x170>
 8001954:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001956:	07db      	lsls	r3, r3, #31
 8001958:	d405      	bmi.n	8001966 <setvbuf+0x4a>
 800195a:	89a3      	ldrh	r3, [r4, #12]
 800195c:	0598      	lsls	r0, r3, #22
 800195e:	d402      	bmi.n	8001966 <setvbuf+0x4a>
 8001960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001962:	f000 fa59 	bl	8001e18 <__retarget_lock_acquire_recursive>
 8001966:	4621      	mov	r1, r4
 8001968:	4638      	mov	r0, r7
 800196a:	f000 f923 	bl	8001bb4 <_fflush_r>
 800196e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001970:	b141      	cbz	r1, 8001984 <setvbuf+0x68>
 8001972:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001976:	4299      	cmp	r1, r3
 8001978:	d002      	beq.n	8001980 <setvbuf+0x64>
 800197a:	4638      	mov	r0, r7
 800197c:	f000 fa7c 	bl	8001e78 <_free_r>
 8001980:	2300      	movs	r3, #0
 8001982:	6363      	str	r3, [r4, #52]	; 0x34
 8001984:	2300      	movs	r3, #0
 8001986:	61a3      	str	r3, [r4, #24]
 8001988:	6063      	str	r3, [r4, #4]
 800198a:	89a3      	ldrh	r3, [r4, #12]
 800198c:	0619      	lsls	r1, r3, #24
 800198e:	d503      	bpl.n	8001998 <setvbuf+0x7c>
 8001990:	6921      	ldr	r1, [r4, #16]
 8001992:	4638      	mov	r0, r7
 8001994:	f000 fa70 	bl	8001e78 <_free_r>
 8001998:	89a3      	ldrh	r3, [r4, #12]
 800199a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800199e:	f023 0303 	bic.w	r3, r3, #3
 80019a2:	f1b8 0f02 	cmp.w	r8, #2
 80019a6:	81a3      	strh	r3, [r4, #12]
 80019a8:	d06c      	beq.n	8001a84 <setvbuf+0x168>
 80019aa:	ab01      	add	r3, sp, #4
 80019ac:	466a      	mov	r2, sp
 80019ae:	4621      	mov	r1, r4
 80019b0:	4638      	mov	r0, r7
 80019b2:	f000 fa33 	bl	8001e1c <__swhatbuf_r>
 80019b6:	89a3      	ldrh	r3, [r4, #12]
 80019b8:	4318      	orrs	r0, r3
 80019ba:	81a0      	strh	r0, [r4, #12]
 80019bc:	2d00      	cmp	r5, #0
 80019be:	d130      	bne.n	8001a22 <setvbuf+0x106>
 80019c0:	9d00      	ldr	r5, [sp, #0]
 80019c2:	4628      	mov	r0, r5
 80019c4:	f000 fa50 	bl	8001e68 <malloc>
 80019c8:	4606      	mov	r6, r0
 80019ca:	2800      	cmp	r0, #0
 80019cc:	d155      	bne.n	8001a7a <setvbuf+0x15e>
 80019ce:	f8dd 9000 	ldr.w	r9, [sp]
 80019d2:	45a9      	cmp	r9, r5
 80019d4:	d14a      	bne.n	8001a6c <setvbuf+0x150>
 80019d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80019da:	2200      	movs	r2, #0
 80019dc:	60a2      	str	r2, [r4, #8]
 80019de:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80019e2:	6022      	str	r2, [r4, #0]
 80019e4:	6122      	str	r2, [r4, #16]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019ec:	6162      	str	r2, [r4, #20]
 80019ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	07d2      	lsls	r2, r2, #31
 80019f6:	81a3      	strh	r3, [r4, #12]
 80019f8:	d405      	bmi.n	8001a06 <setvbuf+0xea>
 80019fa:	f413 7f00 	tst.w	r3, #512	; 0x200
 80019fe:	d102      	bne.n	8001a06 <setvbuf+0xea>
 8001a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a02:	f000 fa0a 	bl	8001e1a <__retarget_lock_release_recursive>
 8001a06:	4628      	mov	r0, r5
 8001a08:	b003      	add	sp, #12
 8001a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <setvbuf+0x184>)
 8001a10:	429c      	cmp	r4, r3
 8001a12:	d101      	bne.n	8001a18 <setvbuf+0xfc>
 8001a14:	68bc      	ldr	r4, [r7, #8]
 8001a16:	e793      	b.n	8001940 <setvbuf+0x24>
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <setvbuf+0x188>)
 8001a1a:	429c      	cmp	r4, r3
 8001a1c:	bf08      	it	eq
 8001a1e:	68fc      	ldreq	r4, [r7, #12]
 8001a20:	e78e      	b.n	8001940 <setvbuf+0x24>
 8001a22:	2e00      	cmp	r6, #0
 8001a24:	d0cd      	beq.n	80019c2 <setvbuf+0xa6>
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	b913      	cbnz	r3, 8001a30 <setvbuf+0x114>
 8001a2a:	4638      	mov	r0, r7
 8001a2c:	f000 f956 	bl	8001cdc <__sinit>
 8001a30:	f1b8 0f01 	cmp.w	r8, #1
 8001a34:	bf08      	it	eq
 8001a36:	89a3      	ldrheq	r3, [r4, #12]
 8001a38:	6026      	str	r6, [r4, #0]
 8001a3a:	bf04      	itt	eq
 8001a3c:	f043 0301 	orreq.w	r3, r3, #1
 8001a40:	81a3      	strheq	r3, [r4, #12]
 8001a42:	89a2      	ldrh	r2, [r4, #12]
 8001a44:	f012 0308 	ands.w	r3, r2, #8
 8001a48:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001a4c:	d01c      	beq.n	8001a88 <setvbuf+0x16c>
 8001a4e:	07d3      	lsls	r3, r2, #31
 8001a50:	bf41      	itttt	mi
 8001a52:	2300      	movmi	r3, #0
 8001a54:	426d      	negmi	r5, r5
 8001a56:	60a3      	strmi	r3, [r4, #8]
 8001a58:	61a5      	strmi	r5, [r4, #24]
 8001a5a:	bf58      	it	pl
 8001a5c:	60a5      	strpl	r5, [r4, #8]
 8001a5e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001a60:	f015 0501 	ands.w	r5, r5, #1
 8001a64:	d115      	bne.n	8001a92 <setvbuf+0x176>
 8001a66:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001a6a:	e7c8      	b.n	80019fe <setvbuf+0xe2>
 8001a6c:	4648      	mov	r0, r9
 8001a6e:	f000 f9fb 	bl	8001e68 <malloc>
 8001a72:	4606      	mov	r6, r0
 8001a74:	2800      	cmp	r0, #0
 8001a76:	d0ae      	beq.n	80019d6 <setvbuf+0xba>
 8001a78:	464d      	mov	r5, r9
 8001a7a:	89a3      	ldrh	r3, [r4, #12]
 8001a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a80:	81a3      	strh	r3, [r4, #12]
 8001a82:	e7d0      	b.n	8001a26 <setvbuf+0x10a>
 8001a84:	2500      	movs	r5, #0
 8001a86:	e7a8      	b.n	80019da <setvbuf+0xbe>
 8001a88:	60a3      	str	r3, [r4, #8]
 8001a8a:	e7e8      	b.n	8001a5e <setvbuf+0x142>
 8001a8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001a90:	e7b9      	b.n	8001a06 <setvbuf+0xea>
 8001a92:	2500      	movs	r5, #0
 8001a94:	e7b7      	b.n	8001a06 <setvbuf+0xea>
 8001a96:	bf00      	nop
 8001a98:	2000002c 	.word	0x2000002c
 8001a9c:	080023c8 	.word	0x080023c8
 8001aa0:	080023e8 	.word	0x080023e8
 8001aa4:	080023a8 	.word	0x080023a8

08001aa8 <__sflush_r>:
 8001aa8:	898a      	ldrh	r2, [r1, #12]
 8001aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aae:	4605      	mov	r5, r0
 8001ab0:	0710      	lsls	r0, r2, #28
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	d458      	bmi.n	8001b68 <__sflush_r+0xc0>
 8001ab6:	684b      	ldr	r3, [r1, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	dc05      	bgt.n	8001ac8 <__sflush_r+0x20>
 8001abc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	dc02      	bgt.n	8001ac8 <__sflush_r+0x20>
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001aca:	2e00      	cmp	r6, #0
 8001acc:	d0f9      	beq.n	8001ac2 <__sflush_r+0x1a>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ad4:	682f      	ldr	r7, [r5, #0]
 8001ad6:	602b      	str	r3, [r5, #0]
 8001ad8:	d032      	beq.n	8001b40 <__sflush_r+0x98>
 8001ada:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001adc:	89a3      	ldrh	r3, [r4, #12]
 8001ade:	075a      	lsls	r2, r3, #29
 8001ae0:	d505      	bpl.n	8001aee <__sflush_r+0x46>
 8001ae2:	6863      	ldr	r3, [r4, #4]
 8001ae4:	1ac0      	subs	r0, r0, r3
 8001ae6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ae8:	b10b      	cbz	r3, 8001aee <__sflush_r+0x46>
 8001aea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001aec:	1ac0      	subs	r0, r0, r3
 8001aee:	2300      	movs	r3, #0
 8001af0:	4602      	mov	r2, r0
 8001af2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001af4:	6a21      	ldr	r1, [r4, #32]
 8001af6:	4628      	mov	r0, r5
 8001af8:	47b0      	blx	r6
 8001afa:	1c43      	adds	r3, r0, #1
 8001afc:	89a3      	ldrh	r3, [r4, #12]
 8001afe:	d106      	bne.n	8001b0e <__sflush_r+0x66>
 8001b00:	6829      	ldr	r1, [r5, #0]
 8001b02:	291d      	cmp	r1, #29
 8001b04:	d82c      	bhi.n	8001b60 <__sflush_r+0xb8>
 8001b06:	4a2a      	ldr	r2, [pc, #168]	; (8001bb0 <__sflush_r+0x108>)
 8001b08:	40ca      	lsrs	r2, r1
 8001b0a:	07d6      	lsls	r6, r2, #31
 8001b0c:	d528      	bpl.n	8001b60 <__sflush_r+0xb8>
 8001b0e:	2200      	movs	r2, #0
 8001b10:	6062      	str	r2, [r4, #4]
 8001b12:	04d9      	lsls	r1, r3, #19
 8001b14:	6922      	ldr	r2, [r4, #16]
 8001b16:	6022      	str	r2, [r4, #0]
 8001b18:	d504      	bpl.n	8001b24 <__sflush_r+0x7c>
 8001b1a:	1c42      	adds	r2, r0, #1
 8001b1c:	d101      	bne.n	8001b22 <__sflush_r+0x7a>
 8001b1e:	682b      	ldr	r3, [r5, #0]
 8001b20:	b903      	cbnz	r3, 8001b24 <__sflush_r+0x7c>
 8001b22:	6560      	str	r0, [r4, #84]	; 0x54
 8001b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b26:	602f      	str	r7, [r5, #0]
 8001b28:	2900      	cmp	r1, #0
 8001b2a:	d0ca      	beq.n	8001ac2 <__sflush_r+0x1a>
 8001b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b30:	4299      	cmp	r1, r3
 8001b32:	d002      	beq.n	8001b3a <__sflush_r+0x92>
 8001b34:	4628      	mov	r0, r5
 8001b36:	f000 f99f 	bl	8001e78 <_free_r>
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	6360      	str	r0, [r4, #52]	; 0x34
 8001b3e:	e7c1      	b.n	8001ac4 <__sflush_r+0x1c>
 8001b40:	6a21      	ldr	r1, [r4, #32]
 8001b42:	2301      	movs	r3, #1
 8001b44:	4628      	mov	r0, r5
 8001b46:	47b0      	blx	r6
 8001b48:	1c41      	adds	r1, r0, #1
 8001b4a:	d1c7      	bne.n	8001adc <__sflush_r+0x34>
 8001b4c:	682b      	ldr	r3, [r5, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0c4      	beq.n	8001adc <__sflush_r+0x34>
 8001b52:	2b1d      	cmp	r3, #29
 8001b54:	d001      	beq.n	8001b5a <__sflush_r+0xb2>
 8001b56:	2b16      	cmp	r3, #22
 8001b58:	d101      	bne.n	8001b5e <__sflush_r+0xb6>
 8001b5a:	602f      	str	r7, [r5, #0]
 8001b5c:	e7b1      	b.n	8001ac2 <__sflush_r+0x1a>
 8001b5e:	89a3      	ldrh	r3, [r4, #12]
 8001b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b64:	81a3      	strh	r3, [r4, #12]
 8001b66:	e7ad      	b.n	8001ac4 <__sflush_r+0x1c>
 8001b68:	690f      	ldr	r7, [r1, #16]
 8001b6a:	2f00      	cmp	r7, #0
 8001b6c:	d0a9      	beq.n	8001ac2 <__sflush_r+0x1a>
 8001b6e:	0793      	lsls	r3, r2, #30
 8001b70:	680e      	ldr	r6, [r1, #0]
 8001b72:	bf08      	it	eq
 8001b74:	694b      	ldreq	r3, [r1, #20]
 8001b76:	600f      	str	r7, [r1, #0]
 8001b78:	bf18      	it	ne
 8001b7a:	2300      	movne	r3, #0
 8001b7c:	eba6 0807 	sub.w	r8, r6, r7
 8001b80:	608b      	str	r3, [r1, #8]
 8001b82:	f1b8 0f00 	cmp.w	r8, #0
 8001b86:	dd9c      	ble.n	8001ac2 <__sflush_r+0x1a>
 8001b88:	6a21      	ldr	r1, [r4, #32]
 8001b8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001b8c:	4643      	mov	r3, r8
 8001b8e:	463a      	mov	r2, r7
 8001b90:	4628      	mov	r0, r5
 8001b92:	47b0      	blx	r6
 8001b94:	2800      	cmp	r0, #0
 8001b96:	dc06      	bgt.n	8001ba6 <__sflush_r+0xfe>
 8001b98:	89a3      	ldrh	r3, [r4, #12]
 8001b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b9e:	81a3      	strh	r3, [r4, #12]
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ba4:	e78e      	b.n	8001ac4 <__sflush_r+0x1c>
 8001ba6:	4407      	add	r7, r0
 8001ba8:	eba8 0800 	sub.w	r8, r8, r0
 8001bac:	e7e9      	b.n	8001b82 <__sflush_r+0xda>
 8001bae:	bf00      	nop
 8001bb0:	20400001 	.word	0x20400001

08001bb4 <_fflush_r>:
 8001bb4:	b538      	push	{r3, r4, r5, lr}
 8001bb6:	690b      	ldr	r3, [r1, #16]
 8001bb8:	4605      	mov	r5, r0
 8001bba:	460c      	mov	r4, r1
 8001bbc:	b913      	cbnz	r3, 8001bc4 <_fflush_r+0x10>
 8001bbe:	2500      	movs	r5, #0
 8001bc0:	4628      	mov	r0, r5
 8001bc2:	bd38      	pop	{r3, r4, r5, pc}
 8001bc4:	b118      	cbz	r0, 8001bce <_fflush_r+0x1a>
 8001bc6:	6983      	ldr	r3, [r0, #24]
 8001bc8:	b90b      	cbnz	r3, 8001bce <_fflush_r+0x1a>
 8001bca:	f000 f887 	bl	8001cdc <__sinit>
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <_fflush_r+0x6c>)
 8001bd0:	429c      	cmp	r4, r3
 8001bd2:	d11b      	bne.n	8001c0c <_fflush_r+0x58>
 8001bd4:	686c      	ldr	r4, [r5, #4]
 8001bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0ef      	beq.n	8001bbe <_fflush_r+0xa>
 8001bde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001be0:	07d0      	lsls	r0, r2, #31
 8001be2:	d404      	bmi.n	8001bee <_fflush_r+0x3a>
 8001be4:	0599      	lsls	r1, r3, #22
 8001be6:	d402      	bmi.n	8001bee <_fflush_r+0x3a>
 8001be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bea:	f000 f915 	bl	8001e18 <__retarget_lock_acquire_recursive>
 8001bee:	4628      	mov	r0, r5
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	f7ff ff59 	bl	8001aa8 <__sflush_r>
 8001bf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001bf8:	07da      	lsls	r2, r3, #31
 8001bfa:	4605      	mov	r5, r0
 8001bfc:	d4e0      	bmi.n	8001bc0 <_fflush_r+0xc>
 8001bfe:	89a3      	ldrh	r3, [r4, #12]
 8001c00:	059b      	lsls	r3, r3, #22
 8001c02:	d4dd      	bmi.n	8001bc0 <_fflush_r+0xc>
 8001c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c06:	f000 f908 	bl	8001e1a <__retarget_lock_release_recursive>
 8001c0a:	e7d9      	b.n	8001bc0 <_fflush_r+0xc>
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <_fflush_r+0x70>)
 8001c0e:	429c      	cmp	r4, r3
 8001c10:	d101      	bne.n	8001c16 <_fflush_r+0x62>
 8001c12:	68ac      	ldr	r4, [r5, #8]
 8001c14:	e7df      	b.n	8001bd6 <_fflush_r+0x22>
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <_fflush_r+0x74>)
 8001c18:	429c      	cmp	r4, r3
 8001c1a:	bf08      	it	eq
 8001c1c:	68ec      	ldreq	r4, [r5, #12]
 8001c1e:	e7da      	b.n	8001bd6 <_fflush_r+0x22>
 8001c20:	080023c8 	.word	0x080023c8
 8001c24:	080023e8 	.word	0x080023e8
 8001c28:	080023a8 	.word	0x080023a8

08001c2c <std>:
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	b510      	push	{r4, lr}
 8001c30:	4604      	mov	r4, r0
 8001c32:	e9c0 3300 	strd	r3, r3, [r0]
 8001c36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c3a:	6083      	str	r3, [r0, #8]
 8001c3c:	8181      	strh	r1, [r0, #12]
 8001c3e:	6643      	str	r3, [r0, #100]	; 0x64
 8001c40:	81c2      	strh	r2, [r0, #14]
 8001c42:	6183      	str	r3, [r0, #24]
 8001c44:	4619      	mov	r1, r3
 8001c46:	2208      	movs	r2, #8
 8001c48:	305c      	adds	r0, #92	; 0x5c
 8001c4a:	f7ff fe57 	bl	80018fc <memset>
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <std+0x38>)
 8001c50:	6263      	str	r3, [r4, #36]	; 0x24
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <std+0x3c>)
 8001c54:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <std+0x40>)
 8001c58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <std+0x44>)
 8001c5c:	6224      	str	r4, [r4, #32]
 8001c5e:	6323      	str	r3, [r4, #48]	; 0x30
 8001c60:	bd10      	pop	{r4, pc}
 8001c62:	bf00      	nop
 8001c64:	08002059 	.word	0x08002059
 8001c68:	0800207b 	.word	0x0800207b
 8001c6c:	080020b3 	.word	0x080020b3
 8001c70:	080020d7 	.word	0x080020d7

08001c74 <_cleanup_r>:
 8001c74:	4901      	ldr	r1, [pc, #4]	; (8001c7c <_cleanup_r+0x8>)
 8001c76:	f000 b8af 	b.w	8001dd8 <_fwalk_reent>
 8001c7a:	bf00      	nop
 8001c7c:	08001bb5 	.word	0x08001bb5

08001c80 <__sfmoreglue>:
 8001c80:	b570      	push	{r4, r5, r6, lr}
 8001c82:	2268      	movs	r2, #104	; 0x68
 8001c84:	1e4d      	subs	r5, r1, #1
 8001c86:	4355      	muls	r5, r2
 8001c88:	460e      	mov	r6, r1
 8001c8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001c8e:	f000 f95f 	bl	8001f50 <_malloc_r>
 8001c92:	4604      	mov	r4, r0
 8001c94:	b140      	cbz	r0, 8001ca8 <__sfmoreglue+0x28>
 8001c96:	2100      	movs	r1, #0
 8001c98:	e9c0 1600 	strd	r1, r6, [r0]
 8001c9c:	300c      	adds	r0, #12
 8001c9e:	60a0      	str	r0, [r4, #8]
 8001ca0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ca4:	f7ff fe2a 	bl	80018fc <memset>
 8001ca8:	4620      	mov	r0, r4
 8001caa:	bd70      	pop	{r4, r5, r6, pc}

08001cac <__sfp_lock_acquire>:
 8001cac:	4801      	ldr	r0, [pc, #4]	; (8001cb4 <__sfp_lock_acquire+0x8>)
 8001cae:	f000 b8b3 	b.w	8001e18 <__retarget_lock_acquire_recursive>
 8001cb2:	bf00      	nop
 8001cb4:	200001b5 	.word	0x200001b5

08001cb8 <__sfp_lock_release>:
 8001cb8:	4801      	ldr	r0, [pc, #4]	; (8001cc0 <__sfp_lock_release+0x8>)
 8001cba:	f000 b8ae 	b.w	8001e1a <__retarget_lock_release_recursive>
 8001cbe:	bf00      	nop
 8001cc0:	200001b5 	.word	0x200001b5

08001cc4 <__sinit_lock_acquire>:
 8001cc4:	4801      	ldr	r0, [pc, #4]	; (8001ccc <__sinit_lock_acquire+0x8>)
 8001cc6:	f000 b8a7 	b.w	8001e18 <__retarget_lock_acquire_recursive>
 8001cca:	bf00      	nop
 8001ccc:	200001b6 	.word	0x200001b6

08001cd0 <__sinit_lock_release>:
 8001cd0:	4801      	ldr	r0, [pc, #4]	; (8001cd8 <__sinit_lock_release+0x8>)
 8001cd2:	f000 b8a2 	b.w	8001e1a <__retarget_lock_release_recursive>
 8001cd6:	bf00      	nop
 8001cd8:	200001b6 	.word	0x200001b6

08001cdc <__sinit>:
 8001cdc:	b510      	push	{r4, lr}
 8001cde:	4604      	mov	r4, r0
 8001ce0:	f7ff fff0 	bl	8001cc4 <__sinit_lock_acquire>
 8001ce4:	69a3      	ldr	r3, [r4, #24]
 8001ce6:	b11b      	cbz	r3, 8001cf0 <__sinit+0x14>
 8001ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cec:	f7ff bff0 	b.w	8001cd0 <__sinit_lock_release>
 8001cf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001cf4:	6523      	str	r3, [r4, #80]	; 0x50
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <__sinit+0x68>)
 8001cf8:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <__sinit+0x6c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8001cfe:	42a3      	cmp	r3, r4
 8001d00:	bf04      	itt	eq
 8001d02:	2301      	moveq	r3, #1
 8001d04:	61a3      	streq	r3, [r4, #24]
 8001d06:	4620      	mov	r0, r4
 8001d08:	f000 f820 	bl	8001d4c <__sfp>
 8001d0c:	6060      	str	r0, [r4, #4]
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f000 f81c 	bl	8001d4c <__sfp>
 8001d14:	60a0      	str	r0, [r4, #8]
 8001d16:	4620      	mov	r0, r4
 8001d18:	f000 f818 	bl	8001d4c <__sfp>
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	60e0      	str	r0, [r4, #12]
 8001d20:	2104      	movs	r1, #4
 8001d22:	6860      	ldr	r0, [r4, #4]
 8001d24:	f7ff ff82 	bl	8001c2c <std>
 8001d28:	68a0      	ldr	r0, [r4, #8]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2109      	movs	r1, #9
 8001d2e:	f7ff ff7d 	bl	8001c2c <std>
 8001d32:	68e0      	ldr	r0, [r4, #12]
 8001d34:	2202      	movs	r2, #2
 8001d36:	2112      	movs	r1, #18
 8001d38:	f7ff ff78 	bl	8001c2c <std>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	61a3      	str	r3, [r4, #24]
 8001d40:	e7d2      	b.n	8001ce8 <__sinit+0xc>
 8001d42:	bf00      	nop
 8001d44:	080023a4 	.word	0x080023a4
 8001d48:	08001c75 	.word	0x08001c75

08001d4c <__sfp>:
 8001d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4e:	4607      	mov	r7, r0
 8001d50:	f7ff ffac 	bl	8001cac <__sfp_lock_acquire>
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <__sfp+0x84>)
 8001d56:	681e      	ldr	r6, [r3, #0]
 8001d58:	69b3      	ldr	r3, [r6, #24]
 8001d5a:	b913      	cbnz	r3, 8001d62 <__sfp+0x16>
 8001d5c:	4630      	mov	r0, r6
 8001d5e:	f7ff ffbd 	bl	8001cdc <__sinit>
 8001d62:	3648      	adds	r6, #72	; 0x48
 8001d64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	d503      	bpl.n	8001d74 <__sfp+0x28>
 8001d6c:	6833      	ldr	r3, [r6, #0]
 8001d6e:	b30b      	cbz	r3, 8001db4 <__sfp+0x68>
 8001d70:	6836      	ldr	r6, [r6, #0]
 8001d72:	e7f7      	b.n	8001d64 <__sfp+0x18>
 8001d74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001d78:	b9d5      	cbnz	r5, 8001db0 <__sfp+0x64>
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <__sfp+0x88>)
 8001d7c:	60e3      	str	r3, [r4, #12]
 8001d7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001d82:	6665      	str	r5, [r4, #100]	; 0x64
 8001d84:	f000 f847 	bl	8001e16 <__retarget_lock_init_recursive>
 8001d88:	f7ff ff96 	bl	8001cb8 <__sfp_lock_release>
 8001d8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001d90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001d94:	6025      	str	r5, [r4, #0]
 8001d96:	61a5      	str	r5, [r4, #24]
 8001d98:	2208      	movs	r2, #8
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001da0:	f7ff fdac 	bl	80018fc <memset>
 8001da4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001da8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001dac:	4620      	mov	r0, r4
 8001dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001db0:	3468      	adds	r4, #104	; 0x68
 8001db2:	e7d9      	b.n	8001d68 <__sfp+0x1c>
 8001db4:	2104      	movs	r1, #4
 8001db6:	4638      	mov	r0, r7
 8001db8:	f7ff ff62 	bl	8001c80 <__sfmoreglue>
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	6030      	str	r0, [r6, #0]
 8001dc0:	2800      	cmp	r0, #0
 8001dc2:	d1d5      	bne.n	8001d70 <__sfp+0x24>
 8001dc4:	f7ff ff78 	bl	8001cb8 <__sfp_lock_release>
 8001dc8:	230c      	movs	r3, #12
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	e7ee      	b.n	8001dac <__sfp+0x60>
 8001dce:	bf00      	nop
 8001dd0:	080023a4 	.word	0x080023a4
 8001dd4:	ffff0001 	.word	0xffff0001

08001dd8 <_fwalk_reent>:
 8001dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ddc:	4606      	mov	r6, r0
 8001dde:	4688      	mov	r8, r1
 8001de0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001de4:	2700      	movs	r7, #0
 8001de6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001dea:	f1b9 0901 	subs.w	r9, r9, #1
 8001dee:	d505      	bpl.n	8001dfc <_fwalk_reent+0x24>
 8001df0:	6824      	ldr	r4, [r4, #0]
 8001df2:	2c00      	cmp	r4, #0
 8001df4:	d1f7      	bne.n	8001de6 <_fwalk_reent+0xe>
 8001df6:	4638      	mov	r0, r7
 8001df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001dfc:	89ab      	ldrh	r3, [r5, #12]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d907      	bls.n	8001e12 <_fwalk_reent+0x3a>
 8001e02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e06:	3301      	adds	r3, #1
 8001e08:	d003      	beq.n	8001e12 <_fwalk_reent+0x3a>
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	4630      	mov	r0, r6
 8001e0e:	47c0      	blx	r8
 8001e10:	4307      	orrs	r7, r0
 8001e12:	3568      	adds	r5, #104	; 0x68
 8001e14:	e7e9      	b.n	8001dea <_fwalk_reent+0x12>

08001e16 <__retarget_lock_init_recursive>:
 8001e16:	4770      	bx	lr

08001e18 <__retarget_lock_acquire_recursive>:
 8001e18:	4770      	bx	lr

08001e1a <__retarget_lock_release_recursive>:
 8001e1a:	4770      	bx	lr

08001e1c <__swhatbuf_r>:
 8001e1c:	b570      	push	{r4, r5, r6, lr}
 8001e1e:	460e      	mov	r6, r1
 8001e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e24:	2900      	cmp	r1, #0
 8001e26:	b096      	sub	sp, #88	; 0x58
 8001e28:	4614      	mov	r4, r2
 8001e2a:	461d      	mov	r5, r3
 8001e2c:	da08      	bge.n	8001e40 <__swhatbuf_r+0x24>
 8001e2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	602a      	str	r2, [r5, #0]
 8001e36:	061a      	lsls	r2, r3, #24
 8001e38:	d410      	bmi.n	8001e5c <__swhatbuf_r+0x40>
 8001e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3e:	e00e      	b.n	8001e5e <__swhatbuf_r+0x42>
 8001e40:	466a      	mov	r2, sp
 8001e42:	f000 f95d 	bl	8002100 <_fstat_r>
 8001e46:	2800      	cmp	r0, #0
 8001e48:	dbf1      	blt.n	8001e2e <__swhatbuf_r+0x12>
 8001e4a:	9a01      	ldr	r2, [sp, #4]
 8001e4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e54:	425a      	negs	r2, r3
 8001e56:	415a      	adcs	r2, r3
 8001e58:	602a      	str	r2, [r5, #0]
 8001e5a:	e7ee      	b.n	8001e3a <__swhatbuf_r+0x1e>
 8001e5c:	2340      	movs	r3, #64	; 0x40
 8001e5e:	2000      	movs	r0, #0
 8001e60:	6023      	str	r3, [r4, #0]
 8001e62:	b016      	add	sp, #88	; 0x58
 8001e64:	bd70      	pop	{r4, r5, r6, pc}
	...

08001e68 <malloc>:
 8001e68:	4b02      	ldr	r3, [pc, #8]	; (8001e74 <malloc+0xc>)
 8001e6a:	4601      	mov	r1, r0
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	f000 b86f 	b.w	8001f50 <_malloc_r>
 8001e72:	bf00      	nop
 8001e74:	2000002c 	.word	0x2000002c

08001e78 <_free_r>:
 8001e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e7a:	2900      	cmp	r1, #0
 8001e7c:	d044      	beq.n	8001f08 <_free_r+0x90>
 8001e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e82:	9001      	str	r0, [sp, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f1a1 0404 	sub.w	r4, r1, #4
 8001e8a:	bfb8      	it	lt
 8001e8c:	18e4      	addlt	r4, r4, r3
 8001e8e:	f000 f95b 	bl	8002148 <__malloc_lock>
 8001e92:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <_free_r+0x94>)
 8001e94:	9801      	ldr	r0, [sp, #4]
 8001e96:	6813      	ldr	r3, [r2, #0]
 8001e98:	b933      	cbnz	r3, 8001ea8 <_free_r+0x30>
 8001e9a:	6063      	str	r3, [r4, #4]
 8001e9c:	6014      	str	r4, [r2, #0]
 8001e9e:	b003      	add	sp, #12
 8001ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001ea4:	f000 b956 	b.w	8002154 <__malloc_unlock>
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	d908      	bls.n	8001ebe <_free_r+0x46>
 8001eac:	6825      	ldr	r5, [r4, #0]
 8001eae:	1961      	adds	r1, r4, r5
 8001eb0:	428b      	cmp	r3, r1
 8001eb2:	bf01      	itttt	eq
 8001eb4:	6819      	ldreq	r1, [r3, #0]
 8001eb6:	685b      	ldreq	r3, [r3, #4]
 8001eb8:	1949      	addeq	r1, r1, r5
 8001eba:	6021      	streq	r1, [r4, #0]
 8001ebc:	e7ed      	b.n	8001e9a <_free_r+0x22>
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	b10b      	cbz	r3, 8001ec8 <_free_r+0x50>
 8001ec4:	42a3      	cmp	r3, r4
 8001ec6:	d9fa      	bls.n	8001ebe <_free_r+0x46>
 8001ec8:	6811      	ldr	r1, [r2, #0]
 8001eca:	1855      	adds	r5, r2, r1
 8001ecc:	42a5      	cmp	r5, r4
 8001ece:	d10b      	bne.n	8001ee8 <_free_r+0x70>
 8001ed0:	6824      	ldr	r4, [r4, #0]
 8001ed2:	4421      	add	r1, r4
 8001ed4:	1854      	adds	r4, r2, r1
 8001ed6:	42a3      	cmp	r3, r4
 8001ed8:	6011      	str	r1, [r2, #0]
 8001eda:	d1e0      	bne.n	8001e9e <_free_r+0x26>
 8001edc:	681c      	ldr	r4, [r3, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	6053      	str	r3, [r2, #4]
 8001ee2:	4421      	add	r1, r4
 8001ee4:	6011      	str	r1, [r2, #0]
 8001ee6:	e7da      	b.n	8001e9e <_free_r+0x26>
 8001ee8:	d902      	bls.n	8001ef0 <_free_r+0x78>
 8001eea:	230c      	movs	r3, #12
 8001eec:	6003      	str	r3, [r0, #0]
 8001eee:	e7d6      	b.n	8001e9e <_free_r+0x26>
 8001ef0:	6825      	ldr	r5, [r4, #0]
 8001ef2:	1961      	adds	r1, r4, r5
 8001ef4:	428b      	cmp	r3, r1
 8001ef6:	bf04      	itt	eq
 8001ef8:	6819      	ldreq	r1, [r3, #0]
 8001efa:	685b      	ldreq	r3, [r3, #4]
 8001efc:	6063      	str	r3, [r4, #4]
 8001efe:	bf04      	itt	eq
 8001f00:	1949      	addeq	r1, r1, r5
 8001f02:	6021      	streq	r1, [r4, #0]
 8001f04:	6054      	str	r4, [r2, #4]
 8001f06:	e7ca      	b.n	8001e9e <_free_r+0x26>
 8001f08:	b003      	add	sp, #12
 8001f0a:	bd30      	pop	{r4, r5, pc}
 8001f0c:	200001b8 	.word	0x200001b8

08001f10 <sbrk_aligned>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	4e0e      	ldr	r6, [pc, #56]	; (8001f4c <sbrk_aligned+0x3c>)
 8001f14:	460c      	mov	r4, r1
 8001f16:	6831      	ldr	r1, [r6, #0]
 8001f18:	4605      	mov	r5, r0
 8001f1a:	b911      	cbnz	r1, 8001f22 <sbrk_aligned+0x12>
 8001f1c:	f000 f88c 	bl	8002038 <_sbrk_r>
 8001f20:	6030      	str	r0, [r6, #0]
 8001f22:	4621      	mov	r1, r4
 8001f24:	4628      	mov	r0, r5
 8001f26:	f000 f887 	bl	8002038 <_sbrk_r>
 8001f2a:	1c43      	adds	r3, r0, #1
 8001f2c:	d00a      	beq.n	8001f44 <sbrk_aligned+0x34>
 8001f2e:	1cc4      	adds	r4, r0, #3
 8001f30:	f024 0403 	bic.w	r4, r4, #3
 8001f34:	42a0      	cmp	r0, r4
 8001f36:	d007      	beq.n	8001f48 <sbrk_aligned+0x38>
 8001f38:	1a21      	subs	r1, r4, r0
 8001f3a:	4628      	mov	r0, r5
 8001f3c:	f000 f87c 	bl	8002038 <_sbrk_r>
 8001f40:	3001      	adds	r0, #1
 8001f42:	d101      	bne.n	8001f48 <sbrk_aligned+0x38>
 8001f44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001f48:	4620      	mov	r0, r4
 8001f4a:	bd70      	pop	{r4, r5, r6, pc}
 8001f4c:	200001bc 	.word	0x200001bc

08001f50 <_malloc_r>:
 8001f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f54:	1ccd      	adds	r5, r1, #3
 8001f56:	f025 0503 	bic.w	r5, r5, #3
 8001f5a:	3508      	adds	r5, #8
 8001f5c:	2d0c      	cmp	r5, #12
 8001f5e:	bf38      	it	cc
 8001f60:	250c      	movcc	r5, #12
 8001f62:	2d00      	cmp	r5, #0
 8001f64:	4607      	mov	r7, r0
 8001f66:	db01      	blt.n	8001f6c <_malloc_r+0x1c>
 8001f68:	42a9      	cmp	r1, r5
 8001f6a:	d905      	bls.n	8001f78 <_malloc_r+0x28>
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	2600      	movs	r6, #0
 8001f72:	4630      	mov	r0, r6
 8001f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f78:	4e2e      	ldr	r6, [pc, #184]	; (8002034 <_malloc_r+0xe4>)
 8001f7a:	f000 f8e5 	bl	8002148 <__malloc_lock>
 8001f7e:	6833      	ldr	r3, [r6, #0]
 8001f80:	461c      	mov	r4, r3
 8001f82:	bb34      	cbnz	r4, 8001fd2 <_malloc_r+0x82>
 8001f84:	4629      	mov	r1, r5
 8001f86:	4638      	mov	r0, r7
 8001f88:	f7ff ffc2 	bl	8001f10 <sbrk_aligned>
 8001f8c:	1c43      	adds	r3, r0, #1
 8001f8e:	4604      	mov	r4, r0
 8001f90:	d14d      	bne.n	800202e <_malloc_r+0xde>
 8001f92:	6834      	ldr	r4, [r6, #0]
 8001f94:	4626      	mov	r6, r4
 8001f96:	2e00      	cmp	r6, #0
 8001f98:	d140      	bne.n	800201c <_malloc_r+0xcc>
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	4631      	mov	r1, r6
 8001f9e:	4638      	mov	r0, r7
 8001fa0:	eb04 0803 	add.w	r8, r4, r3
 8001fa4:	f000 f848 	bl	8002038 <_sbrk_r>
 8001fa8:	4580      	cmp	r8, r0
 8001faa:	d13a      	bne.n	8002022 <_malloc_r+0xd2>
 8001fac:	6821      	ldr	r1, [r4, #0]
 8001fae:	3503      	adds	r5, #3
 8001fb0:	1a6d      	subs	r5, r5, r1
 8001fb2:	f025 0503 	bic.w	r5, r5, #3
 8001fb6:	3508      	adds	r5, #8
 8001fb8:	2d0c      	cmp	r5, #12
 8001fba:	bf38      	it	cc
 8001fbc:	250c      	movcc	r5, #12
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	4638      	mov	r0, r7
 8001fc2:	f7ff ffa5 	bl	8001f10 <sbrk_aligned>
 8001fc6:	3001      	adds	r0, #1
 8001fc8:	d02b      	beq.n	8002022 <_malloc_r+0xd2>
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	442b      	add	r3, r5
 8001fce:	6023      	str	r3, [r4, #0]
 8001fd0:	e00e      	b.n	8001ff0 <_malloc_r+0xa0>
 8001fd2:	6822      	ldr	r2, [r4, #0]
 8001fd4:	1b52      	subs	r2, r2, r5
 8001fd6:	d41e      	bmi.n	8002016 <_malloc_r+0xc6>
 8001fd8:	2a0b      	cmp	r2, #11
 8001fda:	d916      	bls.n	800200a <_malloc_r+0xba>
 8001fdc:	1961      	adds	r1, r4, r5
 8001fde:	42a3      	cmp	r3, r4
 8001fe0:	6025      	str	r5, [r4, #0]
 8001fe2:	bf18      	it	ne
 8001fe4:	6059      	strne	r1, [r3, #4]
 8001fe6:	6863      	ldr	r3, [r4, #4]
 8001fe8:	bf08      	it	eq
 8001fea:	6031      	streq	r1, [r6, #0]
 8001fec:	5162      	str	r2, [r4, r5]
 8001fee:	604b      	str	r3, [r1, #4]
 8001ff0:	4638      	mov	r0, r7
 8001ff2:	f104 060b 	add.w	r6, r4, #11
 8001ff6:	f000 f8ad 	bl	8002154 <__malloc_unlock>
 8001ffa:	f026 0607 	bic.w	r6, r6, #7
 8001ffe:	1d23      	adds	r3, r4, #4
 8002000:	1af2      	subs	r2, r6, r3
 8002002:	d0b6      	beq.n	8001f72 <_malloc_r+0x22>
 8002004:	1b9b      	subs	r3, r3, r6
 8002006:	50a3      	str	r3, [r4, r2]
 8002008:	e7b3      	b.n	8001f72 <_malloc_r+0x22>
 800200a:	6862      	ldr	r2, [r4, #4]
 800200c:	42a3      	cmp	r3, r4
 800200e:	bf0c      	ite	eq
 8002010:	6032      	streq	r2, [r6, #0]
 8002012:	605a      	strne	r2, [r3, #4]
 8002014:	e7ec      	b.n	8001ff0 <_malloc_r+0xa0>
 8002016:	4623      	mov	r3, r4
 8002018:	6864      	ldr	r4, [r4, #4]
 800201a:	e7b2      	b.n	8001f82 <_malloc_r+0x32>
 800201c:	4634      	mov	r4, r6
 800201e:	6876      	ldr	r6, [r6, #4]
 8002020:	e7b9      	b.n	8001f96 <_malloc_r+0x46>
 8002022:	230c      	movs	r3, #12
 8002024:	603b      	str	r3, [r7, #0]
 8002026:	4638      	mov	r0, r7
 8002028:	f000 f894 	bl	8002154 <__malloc_unlock>
 800202c:	e7a1      	b.n	8001f72 <_malloc_r+0x22>
 800202e:	6025      	str	r5, [r4, #0]
 8002030:	e7de      	b.n	8001ff0 <_malloc_r+0xa0>
 8002032:	bf00      	nop
 8002034:	200001b8 	.word	0x200001b8

08002038 <_sbrk_r>:
 8002038:	b538      	push	{r3, r4, r5, lr}
 800203a:	4d06      	ldr	r5, [pc, #24]	; (8002054 <_sbrk_r+0x1c>)
 800203c:	2300      	movs	r3, #0
 800203e:	4604      	mov	r4, r0
 8002040:	4608      	mov	r0, r1
 8002042:	602b      	str	r3, [r5, #0]
 8002044:	f7ff fb46 	bl	80016d4 <_sbrk>
 8002048:	1c43      	adds	r3, r0, #1
 800204a:	d102      	bne.n	8002052 <_sbrk_r+0x1a>
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	b103      	cbz	r3, 8002052 <_sbrk_r+0x1a>
 8002050:	6023      	str	r3, [r4, #0]
 8002052:	bd38      	pop	{r3, r4, r5, pc}
 8002054:	200001c0 	.word	0x200001c0

08002058 <__sread>:
 8002058:	b510      	push	{r4, lr}
 800205a:	460c      	mov	r4, r1
 800205c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002060:	f000 f87e 	bl	8002160 <_read_r>
 8002064:	2800      	cmp	r0, #0
 8002066:	bfab      	itete	ge
 8002068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800206a:	89a3      	ldrhlt	r3, [r4, #12]
 800206c:	181b      	addge	r3, r3, r0
 800206e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002072:	bfac      	ite	ge
 8002074:	6563      	strge	r3, [r4, #84]	; 0x54
 8002076:	81a3      	strhlt	r3, [r4, #12]
 8002078:	bd10      	pop	{r4, pc}

0800207a <__swrite>:
 800207a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800207e:	461f      	mov	r7, r3
 8002080:	898b      	ldrh	r3, [r1, #12]
 8002082:	05db      	lsls	r3, r3, #23
 8002084:	4605      	mov	r5, r0
 8002086:	460c      	mov	r4, r1
 8002088:	4616      	mov	r6, r2
 800208a:	d505      	bpl.n	8002098 <__swrite+0x1e>
 800208c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002090:	2302      	movs	r3, #2
 8002092:	2200      	movs	r2, #0
 8002094:	f000 f846 	bl	8002124 <_lseek_r>
 8002098:	89a3      	ldrh	r3, [r4, #12]
 800209a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800209e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020a2:	81a3      	strh	r3, [r4, #12]
 80020a4:	4632      	mov	r2, r6
 80020a6:	463b      	mov	r3, r7
 80020a8:	4628      	mov	r0, r5
 80020aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020ae:	f7fe bbcb 	b.w	8000848 <_write_r>

080020b2 <__sseek>:
 80020b2:	b510      	push	{r4, lr}
 80020b4:	460c      	mov	r4, r1
 80020b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ba:	f000 f833 	bl	8002124 <_lseek_r>
 80020be:	1c43      	adds	r3, r0, #1
 80020c0:	89a3      	ldrh	r3, [r4, #12]
 80020c2:	bf15      	itete	ne
 80020c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80020c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80020ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80020ce:	81a3      	strheq	r3, [r4, #12]
 80020d0:	bf18      	it	ne
 80020d2:	81a3      	strhne	r3, [r4, #12]
 80020d4:	bd10      	pop	{r4, pc}

080020d6 <__sclose>:
 80020d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020da:	f000 b801 	b.w	80020e0 <_close_r>
	...

080020e0 <_close_r>:
 80020e0:	b538      	push	{r3, r4, r5, lr}
 80020e2:	4d06      	ldr	r5, [pc, #24]	; (80020fc <_close_r+0x1c>)
 80020e4:	2300      	movs	r3, #0
 80020e6:	4604      	mov	r4, r0
 80020e8:	4608      	mov	r0, r1
 80020ea:	602b      	str	r3, [r5, #0]
 80020ec:	f7ff fac9 	bl	8001682 <_close>
 80020f0:	1c43      	adds	r3, r0, #1
 80020f2:	d102      	bne.n	80020fa <_close_r+0x1a>
 80020f4:	682b      	ldr	r3, [r5, #0]
 80020f6:	b103      	cbz	r3, 80020fa <_close_r+0x1a>
 80020f8:	6023      	str	r3, [r4, #0]
 80020fa:	bd38      	pop	{r3, r4, r5, pc}
 80020fc:	200001c0 	.word	0x200001c0

08002100 <_fstat_r>:
 8002100:	b538      	push	{r3, r4, r5, lr}
 8002102:	4d07      	ldr	r5, [pc, #28]	; (8002120 <_fstat_r+0x20>)
 8002104:	2300      	movs	r3, #0
 8002106:	4604      	mov	r4, r0
 8002108:	4608      	mov	r0, r1
 800210a:	4611      	mov	r1, r2
 800210c:	602b      	str	r3, [r5, #0]
 800210e:	f7ff fac4 	bl	800169a <_fstat>
 8002112:	1c43      	adds	r3, r0, #1
 8002114:	d102      	bne.n	800211c <_fstat_r+0x1c>
 8002116:	682b      	ldr	r3, [r5, #0]
 8002118:	b103      	cbz	r3, 800211c <_fstat_r+0x1c>
 800211a:	6023      	str	r3, [r4, #0]
 800211c:	bd38      	pop	{r3, r4, r5, pc}
 800211e:	bf00      	nop
 8002120:	200001c0 	.word	0x200001c0

08002124 <_lseek_r>:
 8002124:	b538      	push	{r3, r4, r5, lr}
 8002126:	4d07      	ldr	r5, [pc, #28]	; (8002144 <_lseek_r+0x20>)
 8002128:	4604      	mov	r4, r0
 800212a:	4608      	mov	r0, r1
 800212c:	4611      	mov	r1, r2
 800212e:	2200      	movs	r2, #0
 8002130:	602a      	str	r2, [r5, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	f7ff fac1 	bl	80016ba <_lseek>
 8002138:	1c43      	adds	r3, r0, #1
 800213a:	d102      	bne.n	8002142 <_lseek_r+0x1e>
 800213c:	682b      	ldr	r3, [r5, #0]
 800213e:	b103      	cbz	r3, 8002142 <_lseek_r+0x1e>
 8002140:	6023      	str	r3, [r4, #0]
 8002142:	bd38      	pop	{r3, r4, r5, pc}
 8002144:	200001c0 	.word	0x200001c0

08002148 <__malloc_lock>:
 8002148:	4801      	ldr	r0, [pc, #4]	; (8002150 <__malloc_lock+0x8>)
 800214a:	f7ff be65 	b.w	8001e18 <__retarget_lock_acquire_recursive>
 800214e:	bf00      	nop
 8002150:	200001b4 	.word	0x200001b4

08002154 <__malloc_unlock>:
 8002154:	4801      	ldr	r0, [pc, #4]	; (800215c <__malloc_unlock+0x8>)
 8002156:	f7ff be60 	b.w	8001e1a <__retarget_lock_release_recursive>
 800215a:	bf00      	nop
 800215c:	200001b4 	.word	0x200001b4

08002160 <_read_r>:
 8002160:	b538      	push	{r3, r4, r5, lr}
 8002162:	4d07      	ldr	r5, [pc, #28]	; (8002180 <_read_r+0x20>)
 8002164:	4604      	mov	r4, r0
 8002166:	4608      	mov	r0, r1
 8002168:	4611      	mov	r1, r2
 800216a:	2200      	movs	r2, #0
 800216c:	602a      	str	r2, [r5, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	f7ff fa6a 	bl	8001648 <_read>
 8002174:	1c43      	adds	r3, r0, #1
 8002176:	d102      	bne.n	800217e <_read_r+0x1e>
 8002178:	682b      	ldr	r3, [r5, #0]
 800217a:	b103      	cbz	r3, 800217e <_read_r+0x1e>
 800217c:	6023      	str	r3, [r4, #0]
 800217e:	bd38      	pop	{r3, r4, r5, pc}
 8002180:	200001c0 	.word	0x200001c0

08002184 <_init>:
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002186:	bf00      	nop
 8002188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218a:	bc08      	pop	{r3}
 800218c:	469e      	mov	lr, r3
 800218e:	4770      	bx	lr

08002190 <_fini>:
 8002190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002192:	bf00      	nop
 8002194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002196:	bc08      	pop	{r3}
 8002198:	469e      	mov	lr, r3
 800219a:	4770      	bx	lr
