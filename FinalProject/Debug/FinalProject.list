
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000185c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c910  080019e4  080019e4  000119e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2f4  0800e2f4  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e2f4  0800e2f4  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e2f4  0800e2f4  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2f4  0800e2f4  0001e2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2f8  0800e2f8  0001e2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800e2fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000009c  0800e398  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  0800e398  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000487c  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dcc  00000000  00000000  00024948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000500  00000000  00000000  00025718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000478  00000000  00000000  00025c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000031d8  00000000  00000000  00026090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004b28  00000000  00000000  00029268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059fde  00000000  00000000  0002dd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00087d6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a88  00000000  00000000  00087dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080019cc 	.word	0x080019cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	080019cc 	.word	0x080019cc

080001c8 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b08b      	sub	sp, #44	; 0x2c
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80001d0:	2300      	movs	r3, #0
 80001d2:	623b      	str	r3, [r7, #32]
 80001d4:	2300      	movs	r3, #0
 80001d6:	61fb      	str	r3, [r7, #28]
 80001d8:	2300      	movs	r3, #0
 80001da:	61bb      	str	r3, [r7, #24]
 80001dc:	2300      	movs	r3, #0
 80001de:	617b      	str	r3, [r7, #20]
 80001e0:	2300      	movs	r3, #0
 80001e2:	613b      	str	r3, [r7, #16]
 80001e4:	2300      	movs	r3, #0
 80001e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	2300      	movs	r3, #0
 80001ee:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80001f0:	4b8b      	ldr	r3, [pc, #556]	; (8000420 <RCC_GetClocksFreq+0x258>)
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	f003 030c 	and.w	r3, r3, #12
 80001f8:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80001fa:	6a3b      	ldr	r3, [r7, #32]
 80001fc:	2b08      	cmp	r3, #8
 80001fe:	d011      	beq.n	8000224 <RCC_GetClocksFreq+0x5c>
 8000200:	6a3b      	ldr	r3, [r7, #32]
 8000202:	2b08      	cmp	r3, #8
 8000204:	d837      	bhi.n	8000276 <RCC_GetClocksFreq+0xae>
 8000206:	6a3b      	ldr	r3, [r7, #32]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d003      	beq.n	8000214 <RCC_GetClocksFreq+0x4c>
 800020c:	6a3b      	ldr	r3, [r7, #32]
 800020e:	2b04      	cmp	r3, #4
 8000210:	d004      	beq.n	800021c <RCC_GetClocksFreq+0x54>
 8000212:	e030      	b.n	8000276 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4a83      	ldr	r2, [pc, #524]	; (8000424 <RCC_GetClocksFreq+0x25c>)
 8000218:	601a      	str	r2, [r3, #0]
      break;
 800021a:	e030      	b.n	800027e <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a81      	ldr	r2, [pc, #516]	; (8000424 <RCC_GetClocksFreq+0x25c>)
 8000220:	601a      	str	r2, [r3, #0]
      break;
 8000222:	e02c      	b.n	800027e <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000224:	4b7e      	ldr	r3, [pc, #504]	; (8000420 <RCC_GetClocksFreq+0x258>)
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800022c:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800022e:	4b7c      	ldr	r3, [pc, #496]	; (8000420 <RCC_GetClocksFreq+0x258>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000236:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000238:	69fb      	ldr	r3, [r7, #28]
 800023a:	0c9b      	lsrs	r3, r3, #18
 800023c:	3302      	adds	r3, #2
 800023e:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000240:	69bb      	ldr	r3, [r7, #24]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d105      	bne.n	8000252 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000246:	69fb      	ldr	r3, [r7, #28]
 8000248:	4a77      	ldr	r2, [pc, #476]	; (8000428 <RCC_GetClocksFreq+0x260>)
 800024a:	fb02 f303 	mul.w	r3, r2, r3
 800024e:	627b      	str	r3, [r7, #36]	; 0x24
 8000250:	e00d      	b.n	800026e <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000252:	4b73      	ldr	r3, [pc, #460]	; (8000420 <RCC_GetClocksFreq+0x258>)
 8000254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000256:	f003 030f 	and.w	r3, r3, #15
 800025a:	3301      	adds	r3, #1
 800025c:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800025e:	4a71      	ldr	r2, [pc, #452]	; (8000424 <RCC_GetClocksFreq+0x25c>)
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	fbb2 f2f3 	udiv	r2, r2, r3
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	fb02 f303 	mul.w	r3, r2, r3
 800026c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000272:	601a      	str	r2, [r3, #0]
      break;
 8000274:	e003      	b.n	800027e <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4a6a      	ldr	r2, [pc, #424]	; (8000424 <RCC_GetClocksFreq+0x25c>)
 800027a:	601a      	str	r2, [r3, #0]
      break;
 800027c:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800027e:	4b68      	ldr	r3, [pc, #416]	; (8000420 <RCC_GetClocksFreq+0x258>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000286:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000288:	6a3b      	ldr	r3, [r7, #32]
 800028a:	091b      	lsrs	r3, r3, #4
 800028c:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 800028e:	4a67      	ldr	r2, [pc, #412]	; (800042c <RCC_GetClocksFreq+0x264>)
 8000290:	6a3b      	ldr	r3, [r7, #32]
 8000292:	4413      	add	r3, r2
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	40da      	lsrs	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80002a6:	4b5e      	ldr	r3, [pc, #376]	; (8000420 <RCC_GetClocksFreq+0x258>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80002ae:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 80002b0:	6a3b      	ldr	r3, [r7, #32]
 80002b2:	0a1b      	lsrs	r3, r3, #8
 80002b4:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80002b6:	4a5d      	ldr	r2, [pc, #372]	; (800042c <RCC_GetClocksFreq+0x264>)
 80002b8:	6a3b      	ldr	r3, [r7, #32]
 80002ba:	4413      	add	r3, r2
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	685a      	ldr	r2, [r3, #4]
 80002c6:	693b      	ldr	r3, [r7, #16]
 80002c8:	40da      	lsrs	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80002ce:	4b54      	ldr	r3, [pc, #336]	; (8000420 <RCC_GetClocksFreq+0x258>)
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80002d6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80002d8:	6a3b      	ldr	r3, [r7, #32]
 80002da:	0adb      	lsrs	r3, r3, #11
 80002dc:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80002de:	4a53      	ldr	r2, [pc, #332]	; (800042c <RCC_GetClocksFreq+0x264>)
 80002e0:	6a3b      	ldr	r3, [r7, #32]
 80002e2:	4413      	add	r3, r2
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	40da      	lsrs	r2, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80002f6:	4b4a      	ldr	r3, [pc, #296]	; (8000420 <RCC_GetClocksFreq+0x258>)
 80002f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80002fe:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000300:	6a3b      	ldr	r3, [r7, #32]
 8000302:	091b      	lsrs	r3, r3, #4
 8000304:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000306:	4a4a      	ldr	r2, [pc, #296]	; (8000430 <RCC_GetClocksFreq+0x268>)
 8000308:	6a3b      	ldr	r3, [r7, #32]
 800030a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800030e:	b29b      	uxth	r3, r3
 8000310:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000312:	693b      	ldr	r3, [r7, #16]
 8000314:	f003 0310 	and.w	r3, r3, #16
 8000318:	2b00      	cmp	r3, #0
 800031a:	d006      	beq.n	800032a <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 800031c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800031e:	693b      	ldr	r3, [r7, #16]
 8000320:	fbb2 f2f3 	udiv	r2, r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	611a      	str	r2, [r3, #16]
 8000328:	e003      	b.n	8000332 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000332:	4b3b      	ldr	r3, [pc, #236]	; (8000420 <RCC_GetClocksFreq+0x258>)
 8000334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000336:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 800033a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 800033c:	6a3b      	ldr	r3, [r7, #32]
 800033e:	0a5b      	lsrs	r3, r3, #9
 8000340:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000342:	4a3b      	ldr	r2, [pc, #236]	; (8000430 <RCC_GetClocksFreq+0x268>)
 8000344:	6a3b      	ldr	r3, [r7, #32]
 8000346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800034a:	b29b      	uxth	r3, r3
 800034c:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	2b00      	cmp	r3, #0
 8000356:	d006      	beq.n	8000366 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800035a:	693b      	ldr	r3, [r7, #16]
 800035c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	615a      	str	r2, [r3, #20]
 8000364:	e003      	b.n	800036e <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800036e:	4b2c      	ldr	r3, [pc, #176]	; (8000420 <RCC_GetClocksFreq+0x258>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	f003 0310 	and.w	r3, r3, #16
 8000376:	2b10      	cmp	r3, #16
 8000378:	d003      	beq.n	8000382 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a29      	ldr	r2, [pc, #164]	; (8000424 <RCC_GetClocksFreq+0x25c>)
 800037e:	619a      	str	r2, [r3, #24]
 8000380:	e003      	b.n	800038a <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 800038a:	4b25      	ldr	r3, [pc, #148]	; (8000420 <RCC_GetClocksFreq+0x258>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038e:	f003 0320 	and.w	r3, r3, #32
 8000392:	2b20      	cmp	r3, #32
 8000394:	d003      	beq.n	800039e <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a22      	ldr	r2, [pc, #136]	; (8000424 <RCC_GetClocksFreq+0x25c>)
 800039a:	61da      	str	r2, [r3, #28]
 800039c:	e003      	b.n	80003a6 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80003a6:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <RCC_GetClocksFreq+0x258>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003b2:	d10d      	bne.n	80003d0 <RCC_GetClocksFreq+0x208>
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d108      	bne.n	80003d0 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 80003be:	68fa      	ldr	r2, [r7, #12]
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d104      	bne.n	80003d0 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80003c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c8:	005a      	lsls	r2, r3, #1
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	621a      	str	r2, [r3, #32]
 80003ce:	e003      	b.n	80003d8 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	68da      	ldr	r2, [r3, #12]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <RCC_GetClocksFreq+0x258>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003e4:	d10d      	bne.n	8000402 <RCC_GetClocksFreq+0x23a>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d108      	bne.n	8000402 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80003f0:	68fa      	ldr	r2, [r7, #12]
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d104      	bne.n	8000402 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80003f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003fa:	005a      	lsls	r2, r3, #1
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	625a      	str	r2, [r3, #36]	; 0x24
 8000400:	e003      	b.n	800040a <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	68da      	ldr	r2, [r3, #12]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <RCC_GetClocksFreq+0x258>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	f003 0303 	and.w	r3, r3, #3
 8000412:	2b00      	cmp	r3, #0
 8000414:	d10e      	bne.n	8000434 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	68da      	ldr	r2, [r3, #12]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	629a      	str	r2, [r3, #40]	; 0x28
 800041e:	e028      	b.n	8000472 <RCC_GetClocksFreq+0x2aa>
 8000420:	40021000 	.word	0x40021000
 8000424:	007a1200 	.word	0x007a1200
 8000428:	003d0900 	.word	0x003d0900
 800042c:	20000000 	.word	0x20000000
 8000430:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000434:	4b6c      	ldr	r3, [pc, #432]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	f003 0303 	and.w	r3, r3, #3
 800043c:	2b01      	cmp	r3, #1
 800043e:	d104      	bne.n	800044a <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	629a      	str	r2, [r3, #40]	; 0x28
 8000448:	e013      	b.n	8000472 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800044a:	4b67      	ldr	r3, [pc, #412]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044e:	f003 0303 	and.w	r3, r3, #3
 8000452:	2b02      	cmp	r3, #2
 8000454:	d104      	bne.n	8000460 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800045c:	629a      	str	r2, [r3, #40]	; 0x28
 800045e:	e008      	b.n	8000472 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000460:	4b61      	ldr	r3, [pc, #388]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	f003 0303 	and.w	r3, r3, #3
 8000468:	2b03      	cmp	r3, #3
 800046a:	d102      	bne.n	8000472 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a5f      	ldr	r2, [pc, #380]	; (80005ec <RCC_GetClocksFreq+0x424>)
 8000470:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000472:	4b5d      	ldr	r3, [pc, #372]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000476:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800047a:	2b00      	cmp	r3, #0
 800047c:	d104      	bne.n	8000488 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	689a      	ldr	r2, [r3, #8]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	62da      	str	r2, [r3, #44]	; 0x2c
 8000486:	e021      	b.n	80004cc <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000488:	4b57      	ldr	r3, [pc, #348]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000494:	d104      	bne.n	80004a0 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	62da      	str	r2, [r3, #44]	; 0x2c
 800049e:	e015      	b.n	80004cc <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80004a0:	4b51      	ldr	r3, [pc, #324]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80004a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80004ac:	d104      	bne.n	80004b8 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004b6:	e009      	b.n	80004cc <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80004b8:	4b4b      	ldr	r3, [pc, #300]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80004c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80004c4:	d102      	bne.n	80004cc <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a48      	ldr	r2, [pc, #288]	; (80005ec <RCC_GetClocksFreq+0x424>)
 80004ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80004cc:	4b46      	ldr	r3, [pc, #280]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 80004ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d104      	bne.n	80004e2 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689a      	ldr	r2, [r3, #8]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	631a      	str	r2, [r3, #48]	; 0x30
 80004e0:	e021      	b.n	8000526 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80004e2:	4b41      	ldr	r3, [pc, #260]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80004ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80004ee:	d104      	bne.n	80004fa <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	631a      	str	r2, [r3, #48]	; 0x30
 80004f8:	e015      	b.n	8000526 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80004fa:	4b3b      	ldr	r3, [pc, #236]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000502:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000506:	d104      	bne.n	8000512 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800050e:	631a      	str	r2, [r3, #48]	; 0x30
 8000510:	e009      	b.n	8000526 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000512:	4b35      	ldr	r3, [pc, #212]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800051a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800051e:	d102      	bne.n	8000526 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4a32      	ldr	r2, [pc, #200]	; (80005ec <RCC_GetClocksFreq+0x424>)
 8000524:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000526:	4b30      	ldr	r3, [pc, #192]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800052e:	2b00      	cmp	r3, #0
 8000530:	d104      	bne.n	800053c <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	689a      	ldr	r2, [r3, #8]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	635a      	str	r2, [r3, #52]	; 0x34
 800053a:	e021      	b.n	8000580 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 800053c:	4b2a      	ldr	r3, [pc, #168]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 800053e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000540:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000548:	d104      	bne.n	8000554 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
 8000552:	e015      	b.n	8000580 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000554:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000558:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800055c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000560:	d104      	bne.n	800056c <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000568:	635a      	str	r2, [r3, #52]	; 0x34
 800056a:	e009      	b.n	8000580 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 800056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000570:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000574:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000578:	d102      	bne.n	8000580 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a1b      	ldr	r2, [pc, #108]	; (80005ec <RCC_GetClocksFreq+0x424>)
 800057e:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000584:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000588:	2b00      	cmp	r3, #0
 800058a:	d104      	bne.n	8000596 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689a      	ldr	r2, [r3, #8]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000594:	e021      	b.n	80005da <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800059e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80005a2:	d104      	bne.n	80005ae <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005ac:	e015      	b.n	80005da <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80005b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80005ba:	d104      	bne.n	80005c6 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005c4:	e009      	b.n	80005da <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <RCC_GetClocksFreq+0x420>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80005ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80005d2:	d102      	bne.n	80005da <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a05      	ldr	r2, [pc, #20]	; (80005ec <RCC_GetClocksFreq+0x424>)
 80005d8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005da:	bf00      	nop
 80005dc:	372c      	adds	r7, #44	; 0x2c
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000
 80005ec:	007a1200 	.word	0x007a1200

080005f0 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000602:	b29a      	uxth	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000614:	b480      	push	{r7}
 8000616:	b089      	sub	sp, #36	; 0x24
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	4613      	mov	r3, r2
 8000620:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	b29b      	uxth	r3, r3
 800063a:	0a1b      	lsrs	r3, r3, #8
 800063c:	b29b      	uxth	r3, r3
 800063e:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000646:	2201      	movs	r2, #1
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d103      	bne.n	800065e <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	3304      	adds	r3, #4
 800065a:	61fb      	str	r3, [r7, #28]
 800065c:	e005      	b.n	800066a <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d102      	bne.n	800066a <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	3308      	adds	r3, #8
 8000668:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d006      	beq.n	800067e <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	6819      	ldr	r1, [r3, #0]
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	430a      	orrs	r2, r1
 800067a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800067c:	e006      	b.n	800068c <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	6819      	ldr	r1, [r3, #0]
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	43da      	mvns	r2, r3
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	400a      	ands	r2, r1
 800068a:	601a      	str	r2, [r3, #0]
}
 800068c:	bf00      	nop
 800068e:	3724      	adds	r7, #36	; 0x24
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	69da      	ldr	r2, [r3, #28]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	4013      	ands	r3, r2
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d002      	beq.n	80006b8 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 80006b2:	2301      	movs	r3, #1
 80006b4:	73fb      	strb	r3, [r7, #15]
 80006b6:	e001      	b.n	80006bc <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80006b8:	2300      	movs	r3, #0
 80006ba:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b087      	sub	sp, #28
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80006f4:	2201      	movs	r2, #1
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d105      	bne.n	8000710 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	e00d      	b.n	800072c <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d105      	bne.n	8000722 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	4013      	ands	r3, r2
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e004      	b.n	800072c <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	697a      	ldr	r2, [r7, #20]
 8000728:	4013      	ands	r3, r2
 800072a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	0c1b      	lsrs	r3, r3, #16
 8000730:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000732:	2201      	movs	r2, #1
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	4013      	ands	r3, r2
 8000744:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d005      	beq.n	8000758 <USART_GetITStatus+0x8e>
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8000752:	2301      	movs	r3, #1
 8000754:	74fb      	strb	r3, [r7, #19]
 8000756:	e001      	b.n	800075c <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800075c:	7cfb      	ldrb	r3, [r7, #19]
}
 800075e:	4618      	mov	r0, r3
 8000760:	371c      	adds	r7, #28
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
	...

0800076c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f003 031f 	and.w	r3, r3, #31
 800077c:	2201      	movs	r2, #1
 800077e:	fa02 f103 	lsl.w	r1, r2, r3
 8000782:	4a06      	ldr	r2, [pc, #24]	; (800079c <NVIC_EnableIRQ+0x30>)
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	095b      	lsrs	r3, r3, #5
 800078a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e100 	.word	0xe000e100

080007a0 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	4619      	mov	r1, r3
 80007b0:	4807      	ldr	r0, [pc, #28]	; (80007d0 <uart_put_char+0x30>)
 80007b2:	f7ff ff1d 	bl	80005f0 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80007b6:	bf00      	nop
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <uart_put_char+0x30>)
 80007bc:	f7ff ff6c 	bl	8000698 <USART_GetFlagStatus>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0f8      	beq.n	80007b8 <uart_put_char+0x18>
}
 80007c6:	bf00      	nop
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40004400 	.word	0x40004400

080007d4 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	e012      	b.n	800080e <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b0a      	cmp	r3, #10
 80007f2:	d102      	bne.n	80007fa <_write_r+0x26>
            uart_put_char('\r');
 80007f4:	200d      	movs	r0, #13
 80007f6:	f7ff ffd3 	bl	80007a0 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ffcc 	bl	80007a0 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	3301      	adds	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	dbe8      	blt.n	80007e8 <_write_r+0x14>
    }

    return len;
 8000816:	683b      	ldr	r3, [r7, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000824:	4915      	ldr	r1, [pc, #84]	; (800087c <USART2_IRQHandler+0x5c>)
 8000826:	4816      	ldr	r0, [pc, #88]	; (8000880 <USART2_IRQHandler+0x60>)
 8000828:	f7ff ff4f 	bl	80006ca <USART_GetITStatus>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d021      	beq.n	8000876 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <USART2_IRQHandler+0x60>)
 8000834:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000836:	b299      	uxth	r1, r3
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <USART2_IRQHandler+0x64>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	1c5a      	adds	r2, r3, #1
 8000840:	b2d0      	uxtb	r0, r2
 8000842:	4a10      	ldr	r2, [pc, #64]	; (8000884 <USART2_IRQHandler+0x64>)
 8000844:	7010      	strb	r0, [r2, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	b2c9      	uxtb	r1, r1
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <USART2_IRQHandler+0x68>)
 800084c:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <USART2_IRQHandler+0x6c>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2bff      	cmp	r3, #255	; 0xff
 8000856:	d107      	bne.n	8000868 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <USART2_IRQHandler+0x70>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	3301      	adds	r3, #1
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <USART2_IRQHandler+0x70>)
 8000864:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000866:	e006      	b.n	8000876 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <USART2_IRQHandler+0x6c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	3301      	adds	r3, #1
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <USART2_IRQHandler+0x6c>)
 8000874:	701a      	strb	r2, [r3, #0]
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	00050105 	.word	0x00050105
 8000880:	40004400 	.word	0x40004400
 8000884:	200001b8 	.word	0x200001b8
 8000888:	200000b8 	.word	0x200000b8
 800088c:	200001ba 	.word	0x200001ba
 8000890:	200001b9 	.word	0x200001b9

08000894 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	; 0x50
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 800089c:	4b86      	ldr	r3, [pc, #536]	; (8000ab8 <uart_init+0x224>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fc55 	bl	8001154 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 80008aa:	4b83      	ldr	r3, [pc, #524]	; (8000ab8 <uart_init+0x224>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fc4e 	bl	8001154 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 80008b8:	4b80      	ldr	r3, [pc, #512]	; (8000abc <uart_init+0x228>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	4a7f      	ldr	r2, [pc, #508]	; (8000abc <uart_init+0x228>)
 80008be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c2:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 80008c4:	4b7d      	ldr	r3, [pc, #500]	; (8000abc <uart_init+0x228>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	4a7c      	ldr	r2, [pc, #496]	; (8000abc <uart_init+0x228>)
 80008ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ce:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 80008d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008d4:	6a1b      	ldr	r3, [r3, #32]
 80008d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80008de:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 80008e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008e4:	6a1b      	ldr	r3, [r3, #32]
 80008e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80008ee:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 80008f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008f4:	6a1b      	ldr	r3, [r3, #32]
 80008f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80008fe:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000900:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000904:	6a1b      	ldr	r3, [r3, #32]
 8000906:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800090a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800090e:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000910:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800091a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800091e:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8000920:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800092a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800092e:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8000930:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000934:	889b      	ldrh	r3, [r3, #4]
 8000936:	b29b      	uxth	r3, r3
 8000938:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800093c:	f023 030c 	bic.w	r3, r3, #12
 8000940:	b29b      	uxth	r3, r3
 8000942:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000944:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000948:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800094c:	8892      	ldrh	r2, [r2, #4]
 800094e:	b292      	uxth	r2, r2
 8000950:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8000952:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800095c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000960:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000962:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800096c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000970:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000972:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800097c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000980:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000982:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800098c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000990:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000992:	4b4b      	ldr	r3, [pc, #300]	; (8000ac0 <uart_init+0x22c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a4a      	ldr	r2, [pc, #296]	; (8000ac0 <uart_init+0x22c>)
 8000998:	f023 0301 	bic.w	r3, r3, #1
 800099c:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 800099e:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <uart_init+0x22c>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	4a47      	ldr	r2, [pc, #284]	; (8000ac0 <uart_init+0x22c>)
 80009a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009a8:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 80009aa:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <uart_init+0x22c>)
 80009ac:	4a44      	ldr	r2, [pc, #272]	; (8000ac0 <uart_init+0x22c>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 80009b2:	4b43      	ldr	r3, [pc, #268]	; (8000ac0 <uart_init+0x22c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a42      	ldr	r2, [pc, #264]	; (8000ac0 <uart_init+0x22c>)
 80009b8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80009bc:	f023 030c 	bic.w	r3, r3, #12
 80009c0:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 80009c2:	4b3f      	ldr	r3, [pc, #252]	; (8000ac0 <uart_init+0x22c>)
 80009c4:	4a3e      	ldr	r2, [pc, #248]	; (8000ac0 <uart_init+0x22c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 80009ca:	4b3d      	ldr	r3, [pc, #244]	; (8000ac0 <uart_init+0x22c>)
 80009cc:	4a3c      	ldr	r2, [pc, #240]	; (8000ac0 <uart_init+0x22c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 80009d2:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <uart_init+0x22c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a3a      	ldr	r2, [pc, #232]	; (8000ac0 <uart_init+0x22c>)
 80009d8:	f043 030c 	orr.w	r3, r3, #12
 80009dc:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 80009de:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <uart_init+0x22c>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	4a37      	ldr	r2, [pc, #220]	; (8000ac0 <uart_init+0x22c>)
 80009e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009e8:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 80009ea:	4b35      	ldr	r3, [pc, #212]	; (8000ac0 <uart_init+0x22c>)
 80009ec:	4a34      	ldr	r2, [pc, #208]	; (8000ac0 <uart_init+0x22c>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009f6:	2300      	movs	r3, #0
 80009f8:	647b      	str	r3, [r7, #68]	; 0x44
 80009fa:	2300      	movs	r3, #0
 80009fc:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fbe0 	bl	80001c8 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a0a:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000a0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ac0 <uart_init+0x22c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d010      	beq.n	8000a3a <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a1a:	005a      	lsls	r2, r3, #1
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a22:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	fb01 f202 	mul.w	r2, r1, r2
 8000a34:	1a9b      	subs	r3, r3, r2
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a38:	e00d      	b.n	8000a56 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000a3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a4c:	6879      	ldr	r1, [r7, #4]
 8000a4e:	fb01 f202 	mul.w	r2, r1, r2
 8000a52:	1a9b      	subs	r3, r3, r2
 8000a54:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d302      	bcc.n	8000a66 <uart_init+0x1d2>
        divider++;
 8000a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a62:	3301      	adds	r3, #1
 8000a64:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <uart_init+0x22c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00b      	beq.n	8000a8a <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a74:	085b      	lsrs	r3, r3, #1
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000a7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a7e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000a82:	4013      	ands	r3, r2
 8000a84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a86:	4313      	orrs	r3, r2
 8000a88:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <uart_init+0x22c>)
 8000a8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a8e:	b292      	uxth	r2, r2
 8000a90:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <uart_init+0x22c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <uart_init+0x22c>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4908      	ldr	r1, [pc, #32]	; (8000ac4 <uart_init+0x230>)
 8000aa2:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <uart_init+0x22c>)
 8000aa4:	f7ff fdb6 	bl	8000614 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000aa8:	2026      	movs	r0, #38	; 0x26
 8000aaa:	f7ff fe5f 	bl	800076c <NVIC_EnableIRQ>
}
 8000aae:	bf00      	nop
 8000ab0:	3750      	adds	r7, #80	; 0x50
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000038 	.word	0x20000038
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40004400 	.word	0x40004400
 8000ac4:	00050105 	.word	0x00050105

08000ac8 <NVIC_EnableIRQ>:
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 031f 	and.w	r3, r3, #31
 8000ad8:	2201      	movs	r2, #1
 8000ada:	fa02 f103 	lsl.w	r1, r2, r3
 8000ade:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <NVIC_EnableIRQ+0x30>)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	095b      	lsrs	r3, r3, #5
 8000ae6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100

08000afc <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	da0b      	bge.n	8000b28 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	; (8000b48 <NVIC_SetPriority+0x4c>)
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f003 030f 	and.w	r3, r3, #15
 8000b1c:	3b04      	subs	r3, #4
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000b26:	e009      	b.n	8000b3c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4907      	ldr	r1, [pc, #28]	; (8000b4c <NVIC_SetPriority+0x50>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <init_timer_2>:
#include "hal.h"

#define AUDIO_BIT_DEPTH 0xff

void init_timer_2 () { // Timer 2 is used for PWM for buzzer
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8000b54:	4b48      	ldr	r3, [pc, #288]	; (8000c78 <init_timer_2+0x128>)
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	4a47      	ldr	r2, [pc, #284]	; (8000c78 <init_timer_2+0x128>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	61d3      	str	r3, [r2, #28]
	//RCC->AHBENR |= RCC_AHBPeriph_GPIOB; // Enable clock for GPIO Port B
	TIM2->CR1 &= 0xF400;	// Configure and disable timer
 8000b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6c:	f423 633f 	bic.w	r3, r3, #3056	; 0xbf0
 8000b70:	f023 030f 	bic.w	r3, r3, #15
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	8013      	strh	r3, [r2, #0]
	TIM2->ARR = AUDIO_BIT_DEPTH;		// Set resolution to 8 bits
 8000b78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b7c:	22ff      	movs	r2, #255	; 0xff
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->PSC = 4;		// Set prescaling/frequency to 568~440Hz, 4=62.5kHz, 2=125kHz
 8000b80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b84:	2204      	movs	r2, #4
 8000b86:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->DIER |= 1;		// Enable timer 2 interrupts
 8000b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	60d3      	str	r3, [r2, #12]

	//NVIC_SetPriority(TIM2_IRQn, 0); // Set priority of interrupt
	//NVIC_EnableIRQ(TIM2_IRQn); 		// Enable the interrupt

	TIM2->CCER &= ~TIM_CCER_CC3P; // Clear CCER register
 8000b98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b9c:	6a1b      	ldr	r3, [r3, #32]
 8000b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ba6:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= 0x00000001 << 8; // Enable OC3 output
 8000ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bac:	6a1b      	ldr	r3, [r3, #32]
 8000bae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb6:	6213      	str	r3, [r2, #32]
	TIM2->CCMR2 &= ~TIM_CCMR2_OC3M; // Clear CCMR2 register
 8000bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bc6:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &= ~TIM_CCMR2_CC3S;
 8000bc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd2:	f023 0303 	bic.w	r3, r3, #3
 8000bd6:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_OCMode_PWM1; // Set output mode to PWM1
 8000bd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000be6:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8000be8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf2:	f023 0308 	bic.w	r3, r3, #8
 8000bf6:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_OCPreload_Enable;
 8000bf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c02:	f043 0308 	orr.w	r3, r3, #8
 8000c06:	61d3      	str	r3, [r2, #28]
	TIM2->CCR3 = 0;//AUDIO_BIT_DEPTH >> 2; // Set duty cycle to 50 %
 8000c08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	63da      	str	r2, [r3, #60]	; 0x3c

	// Set pin PB10 to output
	//GPIOB->OSPEEDR &= ~(0x00000003 << (10 * 2)); // Clear speed register
	//GPIOB->OSPEEDR |= (0x00000002 << (10 * 2)); // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
	GPIOB->OTYPER &= ~(1 << 10); // Clear output type register
 8000c10:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <init_timer_2+0x12c>)
 8000c12:	889b      	ldrh	r3, [r3, #4]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <init_timer_2+0x12c>)
 8000c18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0 << 10); // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8000c20:	4a16      	ldr	r2, [pc, #88]	; (8000c7c <init_timer_2+0x12c>)
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <init_timer_2+0x12c>)
 8000c24:	8892      	ldrh	r2, [r2, #4]
 8000c26:	b292      	uxth	r2, r2
 8000c28:	809a      	strh	r2, [r3, #4]
	GPIOB->MODER &= ~(0b11 << (10*2)); // Clear mode register
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <init_timer_2+0x12c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <init_timer_2+0x12c>)
 8000c30:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000c34:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x02 << (10*2)); // Set mode register (0x00 – Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <init_timer_2+0x12c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <init_timer_2+0x12c>)
 8000c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c40:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] &= ~(0xf << (2*4));
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <init_timer_2+0x12c>)
 8000c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c46:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <init_timer_2+0x12c>)
 8000c48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c4c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (0x0001 << (2*4));
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <init_timer_2+0x12c>)
 8000c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <init_timer_2+0x12c>)
 8000c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c58:	6253      	str	r3, [r2, #36]	; 0x24
	// If above AFR doesn't work use this:
	//GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_1);

	TIM2->CR1 |= 1;
 8000c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	8013      	strh	r3, [r2, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	48000400 	.word	0x48000400

08000c80 <init_timer_15>:

void buzzer_set_pwm (uint8_t value) { // Sets the buzzer PWM pulse width to value/255
	TIM2->CCR3 = value;
}

void init_timer_15() {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2Periph_TIM15;
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <init_timer_15+0x60>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <init_timer_15+0x60>)
 8000c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8e:	6193      	str	r3, [r2, #24]
	TIM15->CR1 &= 0xF470;	// Configure and disable timer
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <init_timer_15+0x64>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <init_timer_15+0x64>)
 8000c98:	f423 6338 	bic.w	r3, r3, #2944	; 0xb80
 8000c9c:	f023 030f 	bic.w	r3, r3, #15
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	8013      	strh	r3, [r2, #0]
	TIM15->ARR = 16000;		// Set auto reload value to 100Hz (original:64000)
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <init_timer_15+0x64>)
 8000ca6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM15->PSC = 0;			// Set prescaling to 1/(9+1) (original:9)
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <init_timer_15+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM15->DIER |= 1;		// Enable timer 15 interrupts
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <init_timer_15+0x64>)
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <init_timer_15+0x64>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1); // Set priority of interrupt
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2018      	movs	r0, #24
 8000cc2:	f7ff ff1b 	bl	8000afc <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn); 		// Enable the interrupt
 8000cc6:	2018      	movs	r0, #24
 8000cc8:	f7ff fefe 	bl	8000ac8 <NVIC_EnableIRQ>

	TIM15->CR1 |= 1;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <init_timer_15+0x64>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <init_timer_15+0x64>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	8013      	strh	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40014000 	.word	0x40014000

08000ce8 <led_init>:

void led_init() {
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
	// Enable clock for used ports
	RCC->AHBENR |= RCC_AHBPeriph_GPIOA;
 8000cec:	4b48      	ldr	r3, [pc, #288]	; (8000e10 <led_init+0x128>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	4a47      	ldr	r2, [pc, #284]	; (8000e10 <led_init+0x128>)
 8000cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf6:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB;
 8000cf8:	4b45      	ldr	r3, [pc, #276]	; (8000e10 <led_init+0x128>)
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	4a44      	ldr	r2, [pc, #272]	; (8000e10 <led_init+0x128>)
 8000cfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d02:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC;
 8000d04:	4b42      	ldr	r3, [pc, #264]	; (8000e10 <led_init+0x128>)
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	4a41      	ldr	r2, [pc, #260]	; (8000e10 <led_init+0x128>)
 8000d0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d0e:	6153      	str	r3, [r2, #20]


	// Reset and set PB4 speed register (red)
	GPIOB->OSPEEDR &= ~(0x00000003 << (4 * 2));
 8000d10:	4b40      	ldr	r3, [pc, #256]	; (8000e14 <led_init+0x12c>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	4a3f      	ldr	r2, [pc, #252]	; (8000e14 <led_init+0x12c>)
 8000d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d1a:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x00000002 << (4 * 2));
 8000d1c:	4b3d      	ldr	r3, [pc, #244]	; (8000e14 <led_init+0x12c>)
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	4a3c      	ldr	r2, [pc, #240]	; (8000e14 <led_init+0x12c>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d26:	6093      	str	r3, [r2, #8]

	// Reset and set PB4 type register (red)
	GPIOB->OTYPER &= ~(0x0001 << (4));
 8000d28:	4b3a      	ldr	r3, [pc, #232]	; (8000e14 <led_init+0x12c>)
 8000d2a:	889b      	ldrh	r3, [r3, #4]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4a39      	ldr	r2, [pc, #228]	; (8000e14 <led_init+0x12c>)
 8000d30:	f023 0310 	bic.w	r3, r3, #16
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	8093      	strh	r3, [r2, #4]
	GPIOB->OTYPER |= (0x0000 << (4));
 8000d38:	4a36      	ldr	r2, [pc, #216]	; (8000e14 <led_init+0x12c>)
 8000d3a:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <led_init+0x12c>)
 8000d3c:	8892      	ldrh	r2, [r2, #4]
 8000d3e:	b292      	uxth	r2, r2
 8000d40:	809a      	strh	r2, [r3, #4]

	// Reset and set PB4 mode register (red)
	GPIOB->MODER &= ~(0x00000003 << (4 * 2));
 8000d42:	4b34      	ldr	r3, [pc, #208]	; (8000e14 <led_init+0x12c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a33      	ldr	r2, [pc, #204]	; (8000e14 <led_init+0x12c>)
 8000d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d4c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000001 << (4 * 2));
 8000d4e:	4b31      	ldr	r3, [pc, #196]	; (8000e14 <led_init+0x12c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a30      	ldr	r2, [pc, #192]	; (8000e14 <led_init+0x12c>)
 8000d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d58:	6013      	str	r3, [r2, #0]


	// Reset and set PC7 speed register (green)
	GPIOC->OSPEEDR &= ~(0x00000003 << (7 * 2));
 8000d5a:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <led_init+0x130>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	4a2e      	ldr	r2, [pc, #184]	; (8000e18 <led_init+0x130>)
 8000d60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d64:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= (0x00000002 << (7 * 2));
 8000d66:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <led_init+0x130>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	4a2b      	ldr	r2, [pc, #172]	; (8000e18 <led_init+0x130>)
 8000d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d70:	6093      	str	r3, [r2, #8]

	// Reset and set PC7 type register (green)
	GPIOC->OTYPER &= ~(0x0001 << (7));
 8000d72:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <led_init+0x130>)
 8000d74:	889b      	ldrh	r3, [r3, #4]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	4a27      	ldr	r2, [pc, #156]	; (8000e18 <led_init+0x130>)
 8000d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	8093      	strh	r3, [r2, #4]
	GPIOC->OTYPER |= (0x0000 << (7));
 8000d82:	4a25      	ldr	r2, [pc, #148]	; (8000e18 <led_init+0x130>)
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <led_init+0x130>)
 8000d86:	8892      	ldrh	r2, [r2, #4]
 8000d88:	b292      	uxth	r2, r2
 8000d8a:	809a      	strh	r2, [r3, #4]

	// Reset and set PC7 mode register (green)
	GPIOC->MODER &= ~(0x00000003 << (7 * 2));
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <led_init+0x130>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a21      	ldr	r2, [pc, #132]	; (8000e18 <led_init+0x130>)
 8000d92:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d96:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000001 << (7 * 2));
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <led_init+0x130>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <led_init+0x130>)
 8000d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da2:	6013      	str	r3, [r2, #0]


	// Reset and set PA9 speed register (blue)
	GPIOA->OSPEEDR &= ~(0x00000003 << (9 * 2));
 8000da4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dae:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000db2:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x00000002 << (9 * 2));
 8000db4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dc2:	6093      	str	r3, [r2, #8]

	// Reset and set PB4 type register (blue)
	GPIOA->OTYPER &= ~(0x0001 << (9));
 8000dc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dc8:	889b      	ldrh	r3, [r3, #4]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	8093      	strh	r3, [r2, #4]
	GPIOA->OTYPER |= (0x0000 << (9));
 8000dd8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ddc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000de0:	8892      	ldrh	r2, [r2, #4]
 8000de2:	b292      	uxth	r2, r2
 8000de4:	809a      	strh	r2, [r3, #4]

	// Reset and set PB4 mode register (blue)
	GPIOA->MODER &= ~(0x00000003 << (9 * 2));
 8000de6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000df0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000df4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000001 << (9 * 2));
 8000df6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e04:	6013      	str	r3, [r2, #0]

}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40021000 	.word	0x40021000
 8000e14:	48000400 	.word	0x48000400
 8000e18:	48000800 	.word	0x48000800

08000e1c <main>:
volatile uint8_t* punk_address = punk_long;
uint8_t* punk_end = punk_long + sizeof punk_long / sizeof *punk_long;
uint8_t* punk_begin = punk_long + 18500;

int main(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	uart_init(9600);
 8000e20:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000e24:	f7ff fd36 	bl	8000894 <uart_init>
	led_init();
 8000e28:	f7ff ff5e 	bl	8000ce8 <led_init>

	init_timer_2();
 8000e2c:	f7ff fe90 	bl	8000b50 <init_timer_2>
	init_timer_15();
 8000e30:	f7ff ff26 	bl	8000c80 <init_timer_15>



	//buzzer_set_pwm(128);

	while (1) {
 8000e34:	e7fe      	b.n	8000e34 <main+0x18>
	...

08000e38 <TIM1_BRK_TIM15_IRQHandler>:
	}

	while(1){}
}

void TIM1_BRK_TIM15_IRQHandler(void) {
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	TIM2->CCR3 = *punk_address;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e48:	63da      	str	r2, [r3, #60]	; 0x3c
	punk_address++;
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8000e52:	6013      	str	r3, [r2, #0]
	if (punk_address == punk_end)
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d103      	bne.n	8000e68 <TIM1_BRK_TIM15_IRQHandler+0x30>
		punk_address = punk_begin;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8000e66:	6013      	str	r3, [r2, #0]
	TIM15->SR &= ~0x0001;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <TIM1_BRK_TIM15_IRQHandler+0x54>)
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <TIM1_BRK_TIM15_IRQHandler+0x54>)
 8000e6e:	f023 0301 	bic.w	r3, r3, #1
 8000e72:	6113      	str	r3, [r2, #16]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	2000002c 	.word	0x2000002c
 8000e84:	20000030 	.word	0x20000030
 8000e88:	20000034 	.word	0x20000034
 8000e8c:	40014000 	.word	0x40014000

08000e90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e00a      	b.n	8000eb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ea2:	f3af 8000 	nop.w
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	b2ca      	uxtb	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf0      	blt.n	8000ea2 <_read+0x12>
	}

return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_close>:
	}
	return len;
}

int _close(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b085      	sub	sp, #20
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
	return 0;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x50>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x16>
		heap_end = &end;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <_sbrk+0x50>)
 8000f2e:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <_sbrk+0x54>)
 8000f30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <_sbrk+0x50>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <_sbrk+0x50>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	466a      	mov	r2, sp
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d907      	bls.n	8000f56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f46:	f000 f8d3 	bl	80010f0 <__errno>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	220c      	movs	r2, #12
 8000f4e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f54:	e006      	b.n	8000f64 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <_sbrk+0x50>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a03      	ldr	r2, [pc, #12]	; (8000f6c <_sbrk+0x50>)
 8000f60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200001bc 	.word	0x200001bc
 8000f70:	200001d0 	.word	0x200001d0

08000f74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <SystemInit+0x84>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a1e      	ldr	r2, [pc, #120]	; (8000ff8 <SystemInit+0x84>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f88:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <SystemInit+0x88>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <SystemInit+0x88>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <SystemInit+0x88>)
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	4918      	ldr	r1, [pc, #96]	; (8000ffc <SystemInit+0x88>)
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <SystemInit+0x8c>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fa0:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <SystemInit+0x88>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <SystemInit+0x88>)
 8000fa6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <SystemInit+0x88>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <SystemInit+0x88>)
 8000fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <SystemInit+0x88>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <SystemInit+0x88>)
 8000fc2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000fc6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <SystemInit+0x88>)
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <SystemInit+0x88>)
 8000fce:	f023 030f 	bic.w	r3, r3, #15
 8000fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <SystemInit+0x88>)
 8000fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd8:	4908      	ldr	r1, [pc, #32]	; (8000ffc <SystemInit+0x88>)
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <SystemInit+0x90>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x88>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000fe6:	f000 f80f 	bl	8001008 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000fea:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <SystemInit+0x84>)
 8000fec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ff0:	609a      	str	r2, [r3, #8]
#endif  
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00
 8000ffc:	40021000 	.word	0x40021000
 8001000:	f87fc00c 	.word	0xf87fc00c
 8001004:	ff00fccc 	.word	0xff00fccc

08001008 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <SetSysClock+0x8c>)
 800100e:	2212      	movs	r2, #18
 8001010:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <SetSysClock+0x90>)
 8001014:	4a20      	ldr	r2, [pc, #128]	; (8001098 <SetSysClock+0x90>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800101a:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <SetSysClock+0x90>)
 800101c:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <SetSysClock+0x90>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <SetSysClock+0x90>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <SetSysClock+0x90>)
 8001028:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102c:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800102e:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <SetSysClock+0x90>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	4a19      	ldr	r2, [pc, #100]	; (8001098 <SetSysClock+0x90>)
 8001034:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001038:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <SetSysClock+0x90>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4a16      	ldr	r2, [pc, #88]	; (8001098 <SetSysClock+0x90>)
 8001040:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001044:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <SetSysClock+0x90>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a13      	ldr	r2, [pc, #76]	; (8001098 <SetSysClock+0x90>)
 800104c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001050:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001052:	bf00      	nop
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <SetSysClock+0x90>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f9      	beq.n	8001054 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001060:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <SetSysClock+0x90>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <SetSysClock+0x90>)
 8001066:	f023 0303 	bic.w	r3, r3, #3
 800106a:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <SetSysClock+0x90>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	4a09      	ldr	r2, [pc, #36]	; (8001098 <SetSysClock+0x90>)
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001078:	bf00      	nop
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <SetSysClock+0x90>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b08      	cmp	r3, #8
 8001084:	d1f9      	bne.n	800107a <SetSysClock+0x72>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40022000 	.word	0x40022000
 8001098:	40021000 	.word	0x40021000

0800109c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800109e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a2:	490e      	ldr	r1, [pc, #56]	; (80010dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a4:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <LoopForever+0xe>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b8:	4c0b      	ldr	r4, [pc, #44]	; (80010e8 <LoopForever+0x16>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010c6:	f7ff ff55 	bl	8000f74 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010ca:	f000 f817 	bl	80010fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ce:	f7ff fea5 	bl	8000e1c <main>

080010d2 <LoopForever>:

LoopForever:
    b LoopForever
 80010d2:	e7fe      	b.n	80010d2 <LoopForever>
  ldr   r0, =_estack
 80010d4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80010e0:	0800e2fc 	.word	0x0800e2fc
  ldr r2, =_sbss
 80010e4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80010e8:	200001d0 	.word	0x200001d0

080010ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC1_2_IRQHandler>
	...

080010f0 <__errno>:
 80010f0:	4b01      	ldr	r3, [pc, #4]	; (80010f8 <__errno+0x8>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000038 	.word	0x20000038

080010fc <__libc_init_array>:
 80010fc:	b570      	push	{r4, r5, r6, lr}
 80010fe:	4d0d      	ldr	r5, [pc, #52]	; (8001134 <__libc_init_array+0x38>)
 8001100:	4c0d      	ldr	r4, [pc, #52]	; (8001138 <__libc_init_array+0x3c>)
 8001102:	1b64      	subs	r4, r4, r5
 8001104:	10a4      	asrs	r4, r4, #2
 8001106:	2600      	movs	r6, #0
 8001108:	42a6      	cmp	r6, r4
 800110a:	d109      	bne.n	8001120 <__libc_init_array+0x24>
 800110c:	4d0b      	ldr	r5, [pc, #44]	; (800113c <__libc_init_array+0x40>)
 800110e:	4c0c      	ldr	r4, [pc, #48]	; (8001140 <__libc_init_array+0x44>)
 8001110:	f000 fc5c 	bl	80019cc <_init>
 8001114:	1b64      	subs	r4, r4, r5
 8001116:	10a4      	asrs	r4, r4, #2
 8001118:	2600      	movs	r6, #0
 800111a:	42a6      	cmp	r6, r4
 800111c:	d105      	bne.n	800112a <__libc_init_array+0x2e>
 800111e:	bd70      	pop	{r4, r5, r6, pc}
 8001120:	f855 3b04 	ldr.w	r3, [r5], #4
 8001124:	4798      	blx	r3
 8001126:	3601      	adds	r6, #1
 8001128:	e7ee      	b.n	8001108 <__libc_init_array+0xc>
 800112a:	f855 3b04 	ldr.w	r3, [r5], #4
 800112e:	4798      	blx	r3
 8001130:	3601      	adds	r6, #1
 8001132:	e7f2      	b.n	800111a <__libc_init_array+0x1e>
 8001134:	0800e2f4 	.word	0x0800e2f4
 8001138:	0800e2f4 	.word	0x0800e2f4
 800113c:	0800e2f4 	.word	0x0800e2f4
 8001140:	0800e2f8 	.word	0x0800e2f8

08001144 <memset>:
 8001144:	4402      	add	r2, r0
 8001146:	4603      	mov	r3, r0
 8001148:	4293      	cmp	r3, r2
 800114a:	d100      	bne.n	800114e <memset+0xa>
 800114c:	4770      	bx	lr
 800114e:	f803 1b01 	strb.w	r1, [r3], #1
 8001152:	e7f9      	b.n	8001148 <memset+0x4>

08001154 <setbuf>:
 8001154:	2900      	cmp	r1, #0
 8001156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115a:	bf0c      	ite	eq
 800115c:	2202      	moveq	r2, #2
 800115e:	2200      	movne	r2, #0
 8001160:	f000 b800 	b.w	8001164 <setvbuf>

08001164 <setvbuf>:
 8001164:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001168:	461d      	mov	r5, r3
 800116a:	4b5d      	ldr	r3, [pc, #372]	; (80012e0 <setvbuf+0x17c>)
 800116c:	681f      	ldr	r7, [r3, #0]
 800116e:	4604      	mov	r4, r0
 8001170:	460e      	mov	r6, r1
 8001172:	4690      	mov	r8, r2
 8001174:	b127      	cbz	r7, 8001180 <setvbuf+0x1c>
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	b913      	cbnz	r3, 8001180 <setvbuf+0x1c>
 800117a:	4638      	mov	r0, r7
 800117c:	f000 f9d2 	bl	8001524 <__sinit>
 8001180:	4b58      	ldr	r3, [pc, #352]	; (80012e4 <setvbuf+0x180>)
 8001182:	429c      	cmp	r4, r3
 8001184:	d167      	bne.n	8001256 <setvbuf+0xf2>
 8001186:	687c      	ldr	r4, [r7, #4]
 8001188:	f1b8 0f02 	cmp.w	r8, #2
 800118c:	d006      	beq.n	800119c <setvbuf+0x38>
 800118e:	f1b8 0f01 	cmp.w	r8, #1
 8001192:	f200 809f 	bhi.w	80012d4 <setvbuf+0x170>
 8001196:	2d00      	cmp	r5, #0
 8001198:	f2c0 809c 	blt.w	80012d4 <setvbuf+0x170>
 800119c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800119e:	07db      	lsls	r3, r3, #31
 80011a0:	d405      	bmi.n	80011ae <setvbuf+0x4a>
 80011a2:	89a3      	ldrh	r3, [r4, #12]
 80011a4:	0598      	lsls	r0, r3, #22
 80011a6:	d402      	bmi.n	80011ae <setvbuf+0x4a>
 80011a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011aa:	f000 fa59 	bl	8001660 <__retarget_lock_acquire_recursive>
 80011ae:	4621      	mov	r1, r4
 80011b0:	4638      	mov	r0, r7
 80011b2:	f000 f923 	bl	80013fc <_fflush_r>
 80011b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011b8:	b141      	cbz	r1, 80011cc <setvbuf+0x68>
 80011ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011be:	4299      	cmp	r1, r3
 80011c0:	d002      	beq.n	80011c8 <setvbuf+0x64>
 80011c2:	4638      	mov	r0, r7
 80011c4:	f000 fa7c 	bl	80016c0 <_free_r>
 80011c8:	2300      	movs	r3, #0
 80011ca:	6363      	str	r3, [r4, #52]	; 0x34
 80011cc:	2300      	movs	r3, #0
 80011ce:	61a3      	str	r3, [r4, #24]
 80011d0:	6063      	str	r3, [r4, #4]
 80011d2:	89a3      	ldrh	r3, [r4, #12]
 80011d4:	0619      	lsls	r1, r3, #24
 80011d6:	d503      	bpl.n	80011e0 <setvbuf+0x7c>
 80011d8:	6921      	ldr	r1, [r4, #16]
 80011da:	4638      	mov	r0, r7
 80011dc:	f000 fa70 	bl	80016c0 <_free_r>
 80011e0:	89a3      	ldrh	r3, [r4, #12]
 80011e2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80011e6:	f023 0303 	bic.w	r3, r3, #3
 80011ea:	f1b8 0f02 	cmp.w	r8, #2
 80011ee:	81a3      	strh	r3, [r4, #12]
 80011f0:	d06c      	beq.n	80012cc <setvbuf+0x168>
 80011f2:	ab01      	add	r3, sp, #4
 80011f4:	466a      	mov	r2, sp
 80011f6:	4621      	mov	r1, r4
 80011f8:	4638      	mov	r0, r7
 80011fa:	f000 fa33 	bl	8001664 <__swhatbuf_r>
 80011fe:	89a3      	ldrh	r3, [r4, #12]
 8001200:	4318      	orrs	r0, r3
 8001202:	81a0      	strh	r0, [r4, #12]
 8001204:	2d00      	cmp	r5, #0
 8001206:	d130      	bne.n	800126a <setvbuf+0x106>
 8001208:	9d00      	ldr	r5, [sp, #0]
 800120a:	4628      	mov	r0, r5
 800120c:	f000 fa50 	bl	80016b0 <malloc>
 8001210:	4606      	mov	r6, r0
 8001212:	2800      	cmp	r0, #0
 8001214:	d155      	bne.n	80012c2 <setvbuf+0x15e>
 8001216:	f8dd 9000 	ldr.w	r9, [sp]
 800121a:	45a9      	cmp	r9, r5
 800121c:	d14a      	bne.n	80012b4 <setvbuf+0x150>
 800121e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001222:	2200      	movs	r2, #0
 8001224:	60a2      	str	r2, [r4, #8]
 8001226:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800122a:	6022      	str	r2, [r4, #0]
 800122c:	6122      	str	r2, [r4, #16]
 800122e:	2201      	movs	r2, #1
 8001230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001234:	6162      	str	r2, [r4, #20]
 8001236:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	07d2      	lsls	r2, r2, #31
 800123e:	81a3      	strh	r3, [r4, #12]
 8001240:	d405      	bmi.n	800124e <setvbuf+0xea>
 8001242:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001246:	d102      	bne.n	800124e <setvbuf+0xea>
 8001248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800124a:	f000 fa0a 	bl	8001662 <__retarget_lock_release_recursive>
 800124e:	4628      	mov	r0, r5
 8001250:	b003      	add	sp, #12
 8001252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <setvbuf+0x184>)
 8001258:	429c      	cmp	r4, r3
 800125a:	d101      	bne.n	8001260 <setvbuf+0xfc>
 800125c:	68bc      	ldr	r4, [r7, #8]
 800125e:	e793      	b.n	8001188 <setvbuf+0x24>
 8001260:	4b22      	ldr	r3, [pc, #136]	; (80012ec <setvbuf+0x188>)
 8001262:	429c      	cmp	r4, r3
 8001264:	bf08      	it	eq
 8001266:	68fc      	ldreq	r4, [r7, #12]
 8001268:	e78e      	b.n	8001188 <setvbuf+0x24>
 800126a:	2e00      	cmp	r6, #0
 800126c:	d0cd      	beq.n	800120a <setvbuf+0xa6>
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	b913      	cbnz	r3, 8001278 <setvbuf+0x114>
 8001272:	4638      	mov	r0, r7
 8001274:	f000 f956 	bl	8001524 <__sinit>
 8001278:	f1b8 0f01 	cmp.w	r8, #1
 800127c:	bf08      	it	eq
 800127e:	89a3      	ldrheq	r3, [r4, #12]
 8001280:	6026      	str	r6, [r4, #0]
 8001282:	bf04      	itt	eq
 8001284:	f043 0301 	orreq.w	r3, r3, #1
 8001288:	81a3      	strheq	r3, [r4, #12]
 800128a:	89a2      	ldrh	r2, [r4, #12]
 800128c:	f012 0308 	ands.w	r3, r2, #8
 8001290:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001294:	d01c      	beq.n	80012d0 <setvbuf+0x16c>
 8001296:	07d3      	lsls	r3, r2, #31
 8001298:	bf41      	itttt	mi
 800129a:	2300      	movmi	r3, #0
 800129c:	426d      	negmi	r5, r5
 800129e:	60a3      	strmi	r3, [r4, #8]
 80012a0:	61a5      	strmi	r5, [r4, #24]
 80012a2:	bf58      	it	pl
 80012a4:	60a5      	strpl	r5, [r4, #8]
 80012a6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80012a8:	f015 0501 	ands.w	r5, r5, #1
 80012ac:	d115      	bne.n	80012da <setvbuf+0x176>
 80012ae:	f412 7f00 	tst.w	r2, #512	; 0x200
 80012b2:	e7c8      	b.n	8001246 <setvbuf+0xe2>
 80012b4:	4648      	mov	r0, r9
 80012b6:	f000 f9fb 	bl	80016b0 <malloc>
 80012ba:	4606      	mov	r6, r0
 80012bc:	2800      	cmp	r0, #0
 80012be:	d0ae      	beq.n	800121e <setvbuf+0xba>
 80012c0:	464d      	mov	r5, r9
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c8:	81a3      	strh	r3, [r4, #12]
 80012ca:	e7d0      	b.n	800126e <setvbuf+0x10a>
 80012cc:	2500      	movs	r5, #0
 80012ce:	e7a8      	b.n	8001222 <setvbuf+0xbe>
 80012d0:	60a3      	str	r3, [r4, #8]
 80012d2:	e7e8      	b.n	80012a6 <setvbuf+0x142>
 80012d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80012d8:	e7b9      	b.n	800124e <setvbuf+0xea>
 80012da:	2500      	movs	r5, #0
 80012dc:	e7b7      	b.n	800124e <setvbuf+0xea>
 80012de:	bf00      	nop
 80012e0:	20000038 	.word	0x20000038
 80012e4:	0800e2b4 	.word	0x0800e2b4
 80012e8:	0800e2d4 	.word	0x0800e2d4
 80012ec:	0800e294 	.word	0x0800e294

080012f0 <__sflush_r>:
 80012f0:	898a      	ldrh	r2, [r1, #12]
 80012f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f6:	4605      	mov	r5, r0
 80012f8:	0710      	lsls	r0, r2, #28
 80012fa:	460c      	mov	r4, r1
 80012fc:	d458      	bmi.n	80013b0 <__sflush_r+0xc0>
 80012fe:	684b      	ldr	r3, [r1, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	dc05      	bgt.n	8001310 <__sflush_r+0x20>
 8001304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001306:	2b00      	cmp	r3, #0
 8001308:	dc02      	bgt.n	8001310 <__sflush_r+0x20>
 800130a:	2000      	movs	r0, #0
 800130c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001312:	2e00      	cmp	r6, #0
 8001314:	d0f9      	beq.n	800130a <__sflush_r+0x1a>
 8001316:	2300      	movs	r3, #0
 8001318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800131c:	682f      	ldr	r7, [r5, #0]
 800131e:	602b      	str	r3, [r5, #0]
 8001320:	d032      	beq.n	8001388 <__sflush_r+0x98>
 8001322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001324:	89a3      	ldrh	r3, [r4, #12]
 8001326:	075a      	lsls	r2, r3, #29
 8001328:	d505      	bpl.n	8001336 <__sflush_r+0x46>
 800132a:	6863      	ldr	r3, [r4, #4]
 800132c:	1ac0      	subs	r0, r0, r3
 800132e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001330:	b10b      	cbz	r3, 8001336 <__sflush_r+0x46>
 8001332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001334:	1ac0      	subs	r0, r0, r3
 8001336:	2300      	movs	r3, #0
 8001338:	4602      	mov	r2, r0
 800133a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800133c:	6a21      	ldr	r1, [r4, #32]
 800133e:	4628      	mov	r0, r5
 8001340:	47b0      	blx	r6
 8001342:	1c43      	adds	r3, r0, #1
 8001344:	89a3      	ldrh	r3, [r4, #12]
 8001346:	d106      	bne.n	8001356 <__sflush_r+0x66>
 8001348:	6829      	ldr	r1, [r5, #0]
 800134a:	291d      	cmp	r1, #29
 800134c:	d82c      	bhi.n	80013a8 <__sflush_r+0xb8>
 800134e:	4a2a      	ldr	r2, [pc, #168]	; (80013f8 <__sflush_r+0x108>)
 8001350:	40ca      	lsrs	r2, r1
 8001352:	07d6      	lsls	r6, r2, #31
 8001354:	d528      	bpl.n	80013a8 <__sflush_r+0xb8>
 8001356:	2200      	movs	r2, #0
 8001358:	6062      	str	r2, [r4, #4]
 800135a:	04d9      	lsls	r1, r3, #19
 800135c:	6922      	ldr	r2, [r4, #16]
 800135e:	6022      	str	r2, [r4, #0]
 8001360:	d504      	bpl.n	800136c <__sflush_r+0x7c>
 8001362:	1c42      	adds	r2, r0, #1
 8001364:	d101      	bne.n	800136a <__sflush_r+0x7a>
 8001366:	682b      	ldr	r3, [r5, #0]
 8001368:	b903      	cbnz	r3, 800136c <__sflush_r+0x7c>
 800136a:	6560      	str	r0, [r4, #84]	; 0x54
 800136c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800136e:	602f      	str	r7, [r5, #0]
 8001370:	2900      	cmp	r1, #0
 8001372:	d0ca      	beq.n	800130a <__sflush_r+0x1a>
 8001374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001378:	4299      	cmp	r1, r3
 800137a:	d002      	beq.n	8001382 <__sflush_r+0x92>
 800137c:	4628      	mov	r0, r5
 800137e:	f000 f99f 	bl	80016c0 <_free_r>
 8001382:	2000      	movs	r0, #0
 8001384:	6360      	str	r0, [r4, #52]	; 0x34
 8001386:	e7c1      	b.n	800130c <__sflush_r+0x1c>
 8001388:	6a21      	ldr	r1, [r4, #32]
 800138a:	2301      	movs	r3, #1
 800138c:	4628      	mov	r0, r5
 800138e:	47b0      	blx	r6
 8001390:	1c41      	adds	r1, r0, #1
 8001392:	d1c7      	bne.n	8001324 <__sflush_r+0x34>
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0c4      	beq.n	8001324 <__sflush_r+0x34>
 800139a:	2b1d      	cmp	r3, #29
 800139c:	d001      	beq.n	80013a2 <__sflush_r+0xb2>
 800139e:	2b16      	cmp	r3, #22
 80013a0:	d101      	bne.n	80013a6 <__sflush_r+0xb6>
 80013a2:	602f      	str	r7, [r5, #0]
 80013a4:	e7b1      	b.n	800130a <__sflush_r+0x1a>
 80013a6:	89a3      	ldrh	r3, [r4, #12]
 80013a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ac:	81a3      	strh	r3, [r4, #12]
 80013ae:	e7ad      	b.n	800130c <__sflush_r+0x1c>
 80013b0:	690f      	ldr	r7, [r1, #16]
 80013b2:	2f00      	cmp	r7, #0
 80013b4:	d0a9      	beq.n	800130a <__sflush_r+0x1a>
 80013b6:	0793      	lsls	r3, r2, #30
 80013b8:	680e      	ldr	r6, [r1, #0]
 80013ba:	bf08      	it	eq
 80013bc:	694b      	ldreq	r3, [r1, #20]
 80013be:	600f      	str	r7, [r1, #0]
 80013c0:	bf18      	it	ne
 80013c2:	2300      	movne	r3, #0
 80013c4:	eba6 0807 	sub.w	r8, r6, r7
 80013c8:	608b      	str	r3, [r1, #8]
 80013ca:	f1b8 0f00 	cmp.w	r8, #0
 80013ce:	dd9c      	ble.n	800130a <__sflush_r+0x1a>
 80013d0:	6a21      	ldr	r1, [r4, #32]
 80013d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013d4:	4643      	mov	r3, r8
 80013d6:	463a      	mov	r2, r7
 80013d8:	4628      	mov	r0, r5
 80013da:	47b0      	blx	r6
 80013dc:	2800      	cmp	r0, #0
 80013de:	dc06      	bgt.n	80013ee <__sflush_r+0xfe>
 80013e0:	89a3      	ldrh	r3, [r4, #12]
 80013e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e6:	81a3      	strh	r3, [r4, #12]
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ec:	e78e      	b.n	800130c <__sflush_r+0x1c>
 80013ee:	4407      	add	r7, r0
 80013f0:	eba8 0800 	sub.w	r8, r8, r0
 80013f4:	e7e9      	b.n	80013ca <__sflush_r+0xda>
 80013f6:	bf00      	nop
 80013f8:	20400001 	.word	0x20400001

080013fc <_fflush_r>:
 80013fc:	b538      	push	{r3, r4, r5, lr}
 80013fe:	690b      	ldr	r3, [r1, #16]
 8001400:	4605      	mov	r5, r0
 8001402:	460c      	mov	r4, r1
 8001404:	b913      	cbnz	r3, 800140c <_fflush_r+0x10>
 8001406:	2500      	movs	r5, #0
 8001408:	4628      	mov	r0, r5
 800140a:	bd38      	pop	{r3, r4, r5, pc}
 800140c:	b118      	cbz	r0, 8001416 <_fflush_r+0x1a>
 800140e:	6983      	ldr	r3, [r0, #24]
 8001410:	b90b      	cbnz	r3, 8001416 <_fflush_r+0x1a>
 8001412:	f000 f887 	bl	8001524 <__sinit>
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <_fflush_r+0x6c>)
 8001418:	429c      	cmp	r4, r3
 800141a:	d11b      	bne.n	8001454 <_fflush_r+0x58>
 800141c:	686c      	ldr	r4, [r5, #4]
 800141e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0ef      	beq.n	8001406 <_fflush_r+0xa>
 8001426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001428:	07d0      	lsls	r0, r2, #31
 800142a:	d404      	bmi.n	8001436 <_fflush_r+0x3a>
 800142c:	0599      	lsls	r1, r3, #22
 800142e:	d402      	bmi.n	8001436 <_fflush_r+0x3a>
 8001430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001432:	f000 f915 	bl	8001660 <__retarget_lock_acquire_recursive>
 8001436:	4628      	mov	r0, r5
 8001438:	4621      	mov	r1, r4
 800143a:	f7ff ff59 	bl	80012f0 <__sflush_r>
 800143e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001440:	07da      	lsls	r2, r3, #31
 8001442:	4605      	mov	r5, r0
 8001444:	d4e0      	bmi.n	8001408 <_fflush_r+0xc>
 8001446:	89a3      	ldrh	r3, [r4, #12]
 8001448:	059b      	lsls	r3, r3, #22
 800144a:	d4dd      	bmi.n	8001408 <_fflush_r+0xc>
 800144c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800144e:	f000 f908 	bl	8001662 <__retarget_lock_release_recursive>
 8001452:	e7d9      	b.n	8001408 <_fflush_r+0xc>
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <_fflush_r+0x70>)
 8001456:	429c      	cmp	r4, r3
 8001458:	d101      	bne.n	800145e <_fflush_r+0x62>
 800145a:	68ac      	ldr	r4, [r5, #8]
 800145c:	e7df      	b.n	800141e <_fflush_r+0x22>
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <_fflush_r+0x74>)
 8001460:	429c      	cmp	r4, r3
 8001462:	bf08      	it	eq
 8001464:	68ec      	ldreq	r4, [r5, #12]
 8001466:	e7da      	b.n	800141e <_fflush_r+0x22>
 8001468:	0800e2b4 	.word	0x0800e2b4
 800146c:	0800e2d4 	.word	0x0800e2d4
 8001470:	0800e294 	.word	0x0800e294

08001474 <std>:
 8001474:	2300      	movs	r3, #0
 8001476:	b510      	push	{r4, lr}
 8001478:	4604      	mov	r4, r0
 800147a:	e9c0 3300 	strd	r3, r3, [r0]
 800147e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001482:	6083      	str	r3, [r0, #8]
 8001484:	8181      	strh	r1, [r0, #12]
 8001486:	6643      	str	r3, [r0, #100]	; 0x64
 8001488:	81c2      	strh	r2, [r0, #14]
 800148a:	6183      	str	r3, [r0, #24]
 800148c:	4619      	mov	r1, r3
 800148e:	2208      	movs	r2, #8
 8001490:	305c      	adds	r0, #92	; 0x5c
 8001492:	f7ff fe57 	bl	8001144 <memset>
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <std+0x38>)
 8001498:	6263      	str	r3, [r4, #36]	; 0x24
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <std+0x3c>)
 800149c:	62a3      	str	r3, [r4, #40]	; 0x28
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <std+0x40>)
 80014a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <std+0x44>)
 80014a4:	6224      	str	r4, [r4, #32]
 80014a6:	6323      	str	r3, [r4, #48]	; 0x30
 80014a8:	bd10      	pop	{r4, pc}
 80014aa:	bf00      	nop
 80014ac:	080018a1 	.word	0x080018a1
 80014b0:	080018c3 	.word	0x080018c3
 80014b4:	080018fb 	.word	0x080018fb
 80014b8:	0800191f 	.word	0x0800191f

080014bc <_cleanup_r>:
 80014bc:	4901      	ldr	r1, [pc, #4]	; (80014c4 <_cleanup_r+0x8>)
 80014be:	f000 b8af 	b.w	8001620 <_fwalk_reent>
 80014c2:	bf00      	nop
 80014c4:	080013fd 	.word	0x080013fd

080014c8 <__sfmoreglue>:
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	2268      	movs	r2, #104	; 0x68
 80014cc:	1e4d      	subs	r5, r1, #1
 80014ce:	4355      	muls	r5, r2
 80014d0:	460e      	mov	r6, r1
 80014d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014d6:	f000 f95f 	bl	8001798 <_malloc_r>
 80014da:	4604      	mov	r4, r0
 80014dc:	b140      	cbz	r0, 80014f0 <__sfmoreglue+0x28>
 80014de:	2100      	movs	r1, #0
 80014e0:	e9c0 1600 	strd	r1, r6, [r0]
 80014e4:	300c      	adds	r0, #12
 80014e6:	60a0      	str	r0, [r4, #8]
 80014e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014ec:	f7ff fe2a 	bl	8001144 <memset>
 80014f0:	4620      	mov	r0, r4
 80014f2:	bd70      	pop	{r4, r5, r6, pc}

080014f4 <__sfp_lock_acquire>:
 80014f4:	4801      	ldr	r0, [pc, #4]	; (80014fc <__sfp_lock_acquire+0x8>)
 80014f6:	f000 b8b3 	b.w	8001660 <__retarget_lock_acquire_recursive>
 80014fa:	bf00      	nop
 80014fc:	200001c1 	.word	0x200001c1

08001500 <__sfp_lock_release>:
 8001500:	4801      	ldr	r0, [pc, #4]	; (8001508 <__sfp_lock_release+0x8>)
 8001502:	f000 b8ae 	b.w	8001662 <__retarget_lock_release_recursive>
 8001506:	bf00      	nop
 8001508:	200001c1 	.word	0x200001c1

0800150c <__sinit_lock_acquire>:
 800150c:	4801      	ldr	r0, [pc, #4]	; (8001514 <__sinit_lock_acquire+0x8>)
 800150e:	f000 b8a7 	b.w	8001660 <__retarget_lock_acquire_recursive>
 8001512:	bf00      	nop
 8001514:	200001c2 	.word	0x200001c2

08001518 <__sinit_lock_release>:
 8001518:	4801      	ldr	r0, [pc, #4]	; (8001520 <__sinit_lock_release+0x8>)
 800151a:	f000 b8a2 	b.w	8001662 <__retarget_lock_release_recursive>
 800151e:	bf00      	nop
 8001520:	200001c2 	.word	0x200001c2

08001524 <__sinit>:
 8001524:	b510      	push	{r4, lr}
 8001526:	4604      	mov	r4, r0
 8001528:	f7ff fff0 	bl	800150c <__sinit_lock_acquire>
 800152c:	69a3      	ldr	r3, [r4, #24]
 800152e:	b11b      	cbz	r3, 8001538 <__sinit+0x14>
 8001530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001534:	f7ff bff0 	b.w	8001518 <__sinit_lock_release>
 8001538:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800153c:	6523      	str	r3, [r4, #80]	; 0x50
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <__sinit+0x68>)
 8001540:	4a13      	ldr	r2, [pc, #76]	; (8001590 <__sinit+0x6c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	62a2      	str	r2, [r4, #40]	; 0x28
 8001546:	42a3      	cmp	r3, r4
 8001548:	bf04      	itt	eq
 800154a:	2301      	moveq	r3, #1
 800154c:	61a3      	streq	r3, [r4, #24]
 800154e:	4620      	mov	r0, r4
 8001550:	f000 f820 	bl	8001594 <__sfp>
 8001554:	6060      	str	r0, [r4, #4]
 8001556:	4620      	mov	r0, r4
 8001558:	f000 f81c 	bl	8001594 <__sfp>
 800155c:	60a0      	str	r0, [r4, #8]
 800155e:	4620      	mov	r0, r4
 8001560:	f000 f818 	bl	8001594 <__sfp>
 8001564:	2200      	movs	r2, #0
 8001566:	60e0      	str	r0, [r4, #12]
 8001568:	2104      	movs	r1, #4
 800156a:	6860      	ldr	r0, [r4, #4]
 800156c:	f7ff ff82 	bl	8001474 <std>
 8001570:	68a0      	ldr	r0, [r4, #8]
 8001572:	2201      	movs	r2, #1
 8001574:	2109      	movs	r1, #9
 8001576:	f7ff ff7d 	bl	8001474 <std>
 800157a:	68e0      	ldr	r0, [r4, #12]
 800157c:	2202      	movs	r2, #2
 800157e:	2112      	movs	r1, #18
 8001580:	f7ff ff78 	bl	8001474 <std>
 8001584:	2301      	movs	r3, #1
 8001586:	61a3      	str	r3, [r4, #24]
 8001588:	e7d2      	b.n	8001530 <__sinit+0xc>
 800158a:	bf00      	nop
 800158c:	0800e290 	.word	0x0800e290
 8001590:	080014bd 	.word	0x080014bd

08001594 <__sfp>:
 8001594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001596:	4607      	mov	r7, r0
 8001598:	f7ff ffac 	bl	80014f4 <__sfp_lock_acquire>
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <__sfp+0x84>)
 800159e:	681e      	ldr	r6, [r3, #0]
 80015a0:	69b3      	ldr	r3, [r6, #24]
 80015a2:	b913      	cbnz	r3, 80015aa <__sfp+0x16>
 80015a4:	4630      	mov	r0, r6
 80015a6:	f7ff ffbd 	bl	8001524 <__sinit>
 80015aa:	3648      	adds	r6, #72	; 0x48
 80015ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	d503      	bpl.n	80015bc <__sfp+0x28>
 80015b4:	6833      	ldr	r3, [r6, #0]
 80015b6:	b30b      	cbz	r3, 80015fc <__sfp+0x68>
 80015b8:	6836      	ldr	r6, [r6, #0]
 80015ba:	e7f7      	b.n	80015ac <__sfp+0x18>
 80015bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80015c0:	b9d5      	cbnz	r5, 80015f8 <__sfp+0x64>
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <__sfp+0x88>)
 80015c4:	60e3      	str	r3, [r4, #12]
 80015c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015ca:	6665      	str	r5, [r4, #100]	; 0x64
 80015cc:	f000 f847 	bl	800165e <__retarget_lock_init_recursive>
 80015d0:	f7ff ff96 	bl	8001500 <__sfp_lock_release>
 80015d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80015d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80015dc:	6025      	str	r5, [r4, #0]
 80015de:	61a5      	str	r5, [r4, #24]
 80015e0:	2208      	movs	r2, #8
 80015e2:	4629      	mov	r1, r5
 80015e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80015e8:	f7ff fdac 	bl	8001144 <memset>
 80015ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80015f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80015f4:	4620      	mov	r0, r4
 80015f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015f8:	3468      	adds	r4, #104	; 0x68
 80015fa:	e7d9      	b.n	80015b0 <__sfp+0x1c>
 80015fc:	2104      	movs	r1, #4
 80015fe:	4638      	mov	r0, r7
 8001600:	f7ff ff62 	bl	80014c8 <__sfmoreglue>
 8001604:	4604      	mov	r4, r0
 8001606:	6030      	str	r0, [r6, #0]
 8001608:	2800      	cmp	r0, #0
 800160a:	d1d5      	bne.n	80015b8 <__sfp+0x24>
 800160c:	f7ff ff78 	bl	8001500 <__sfp_lock_release>
 8001610:	230c      	movs	r3, #12
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	e7ee      	b.n	80015f4 <__sfp+0x60>
 8001616:	bf00      	nop
 8001618:	0800e290 	.word	0x0800e290
 800161c:	ffff0001 	.word	0xffff0001

08001620 <_fwalk_reent>:
 8001620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001624:	4606      	mov	r6, r0
 8001626:	4688      	mov	r8, r1
 8001628:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800162c:	2700      	movs	r7, #0
 800162e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001632:	f1b9 0901 	subs.w	r9, r9, #1
 8001636:	d505      	bpl.n	8001644 <_fwalk_reent+0x24>
 8001638:	6824      	ldr	r4, [r4, #0]
 800163a:	2c00      	cmp	r4, #0
 800163c:	d1f7      	bne.n	800162e <_fwalk_reent+0xe>
 800163e:	4638      	mov	r0, r7
 8001640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001644:	89ab      	ldrh	r3, [r5, #12]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d907      	bls.n	800165a <_fwalk_reent+0x3a>
 800164a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800164e:	3301      	adds	r3, #1
 8001650:	d003      	beq.n	800165a <_fwalk_reent+0x3a>
 8001652:	4629      	mov	r1, r5
 8001654:	4630      	mov	r0, r6
 8001656:	47c0      	blx	r8
 8001658:	4307      	orrs	r7, r0
 800165a:	3568      	adds	r5, #104	; 0x68
 800165c:	e7e9      	b.n	8001632 <_fwalk_reent+0x12>

0800165e <__retarget_lock_init_recursive>:
 800165e:	4770      	bx	lr

08001660 <__retarget_lock_acquire_recursive>:
 8001660:	4770      	bx	lr

08001662 <__retarget_lock_release_recursive>:
 8001662:	4770      	bx	lr

08001664 <__swhatbuf_r>:
 8001664:	b570      	push	{r4, r5, r6, lr}
 8001666:	460e      	mov	r6, r1
 8001668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800166c:	2900      	cmp	r1, #0
 800166e:	b096      	sub	sp, #88	; 0x58
 8001670:	4614      	mov	r4, r2
 8001672:	461d      	mov	r5, r3
 8001674:	da08      	bge.n	8001688 <__swhatbuf_r+0x24>
 8001676:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	602a      	str	r2, [r5, #0]
 800167e:	061a      	lsls	r2, r3, #24
 8001680:	d410      	bmi.n	80016a4 <__swhatbuf_r+0x40>
 8001682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001686:	e00e      	b.n	80016a6 <__swhatbuf_r+0x42>
 8001688:	466a      	mov	r2, sp
 800168a:	f000 f95d 	bl	8001948 <_fstat_r>
 800168e:	2800      	cmp	r0, #0
 8001690:	dbf1      	blt.n	8001676 <__swhatbuf_r+0x12>
 8001692:	9a01      	ldr	r2, [sp, #4]
 8001694:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001698:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800169c:	425a      	negs	r2, r3
 800169e:	415a      	adcs	r2, r3
 80016a0:	602a      	str	r2, [r5, #0]
 80016a2:	e7ee      	b.n	8001682 <__swhatbuf_r+0x1e>
 80016a4:	2340      	movs	r3, #64	; 0x40
 80016a6:	2000      	movs	r0, #0
 80016a8:	6023      	str	r3, [r4, #0]
 80016aa:	b016      	add	sp, #88	; 0x58
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080016b0 <malloc>:
 80016b0:	4b02      	ldr	r3, [pc, #8]	; (80016bc <malloc+0xc>)
 80016b2:	4601      	mov	r1, r0
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	f000 b86f 	b.w	8001798 <_malloc_r>
 80016ba:	bf00      	nop
 80016bc:	20000038 	.word	0x20000038

080016c0 <_free_r>:
 80016c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80016c2:	2900      	cmp	r1, #0
 80016c4:	d044      	beq.n	8001750 <_free_r+0x90>
 80016c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016ca:	9001      	str	r0, [sp, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f1a1 0404 	sub.w	r4, r1, #4
 80016d2:	bfb8      	it	lt
 80016d4:	18e4      	addlt	r4, r4, r3
 80016d6:	f000 f95b 	bl	8001990 <__malloc_lock>
 80016da:	4a1e      	ldr	r2, [pc, #120]	; (8001754 <_free_r+0x94>)
 80016dc:	9801      	ldr	r0, [sp, #4]
 80016de:	6813      	ldr	r3, [r2, #0]
 80016e0:	b933      	cbnz	r3, 80016f0 <_free_r+0x30>
 80016e2:	6063      	str	r3, [r4, #4]
 80016e4:	6014      	str	r4, [r2, #0]
 80016e6:	b003      	add	sp, #12
 80016e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80016ec:	f000 b956 	b.w	800199c <__malloc_unlock>
 80016f0:	42a3      	cmp	r3, r4
 80016f2:	d908      	bls.n	8001706 <_free_r+0x46>
 80016f4:	6825      	ldr	r5, [r4, #0]
 80016f6:	1961      	adds	r1, r4, r5
 80016f8:	428b      	cmp	r3, r1
 80016fa:	bf01      	itttt	eq
 80016fc:	6819      	ldreq	r1, [r3, #0]
 80016fe:	685b      	ldreq	r3, [r3, #4]
 8001700:	1949      	addeq	r1, r1, r5
 8001702:	6021      	streq	r1, [r4, #0]
 8001704:	e7ed      	b.n	80016e2 <_free_r+0x22>
 8001706:	461a      	mov	r2, r3
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	b10b      	cbz	r3, 8001710 <_free_r+0x50>
 800170c:	42a3      	cmp	r3, r4
 800170e:	d9fa      	bls.n	8001706 <_free_r+0x46>
 8001710:	6811      	ldr	r1, [r2, #0]
 8001712:	1855      	adds	r5, r2, r1
 8001714:	42a5      	cmp	r5, r4
 8001716:	d10b      	bne.n	8001730 <_free_r+0x70>
 8001718:	6824      	ldr	r4, [r4, #0]
 800171a:	4421      	add	r1, r4
 800171c:	1854      	adds	r4, r2, r1
 800171e:	42a3      	cmp	r3, r4
 8001720:	6011      	str	r1, [r2, #0]
 8001722:	d1e0      	bne.n	80016e6 <_free_r+0x26>
 8001724:	681c      	ldr	r4, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	6053      	str	r3, [r2, #4]
 800172a:	4421      	add	r1, r4
 800172c:	6011      	str	r1, [r2, #0]
 800172e:	e7da      	b.n	80016e6 <_free_r+0x26>
 8001730:	d902      	bls.n	8001738 <_free_r+0x78>
 8001732:	230c      	movs	r3, #12
 8001734:	6003      	str	r3, [r0, #0]
 8001736:	e7d6      	b.n	80016e6 <_free_r+0x26>
 8001738:	6825      	ldr	r5, [r4, #0]
 800173a:	1961      	adds	r1, r4, r5
 800173c:	428b      	cmp	r3, r1
 800173e:	bf04      	itt	eq
 8001740:	6819      	ldreq	r1, [r3, #0]
 8001742:	685b      	ldreq	r3, [r3, #4]
 8001744:	6063      	str	r3, [r4, #4]
 8001746:	bf04      	itt	eq
 8001748:	1949      	addeq	r1, r1, r5
 800174a:	6021      	streq	r1, [r4, #0]
 800174c:	6054      	str	r4, [r2, #4]
 800174e:	e7ca      	b.n	80016e6 <_free_r+0x26>
 8001750:	b003      	add	sp, #12
 8001752:	bd30      	pop	{r4, r5, pc}
 8001754:	200001c4 	.word	0x200001c4

08001758 <sbrk_aligned>:
 8001758:	b570      	push	{r4, r5, r6, lr}
 800175a:	4e0e      	ldr	r6, [pc, #56]	; (8001794 <sbrk_aligned+0x3c>)
 800175c:	460c      	mov	r4, r1
 800175e:	6831      	ldr	r1, [r6, #0]
 8001760:	4605      	mov	r5, r0
 8001762:	b911      	cbnz	r1, 800176a <sbrk_aligned+0x12>
 8001764:	f000 f88c 	bl	8001880 <_sbrk_r>
 8001768:	6030      	str	r0, [r6, #0]
 800176a:	4621      	mov	r1, r4
 800176c:	4628      	mov	r0, r5
 800176e:	f000 f887 	bl	8001880 <_sbrk_r>
 8001772:	1c43      	adds	r3, r0, #1
 8001774:	d00a      	beq.n	800178c <sbrk_aligned+0x34>
 8001776:	1cc4      	adds	r4, r0, #3
 8001778:	f024 0403 	bic.w	r4, r4, #3
 800177c:	42a0      	cmp	r0, r4
 800177e:	d007      	beq.n	8001790 <sbrk_aligned+0x38>
 8001780:	1a21      	subs	r1, r4, r0
 8001782:	4628      	mov	r0, r5
 8001784:	f000 f87c 	bl	8001880 <_sbrk_r>
 8001788:	3001      	adds	r0, #1
 800178a:	d101      	bne.n	8001790 <sbrk_aligned+0x38>
 800178c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001790:	4620      	mov	r0, r4
 8001792:	bd70      	pop	{r4, r5, r6, pc}
 8001794:	200001c8 	.word	0x200001c8

08001798 <_malloc_r>:
 8001798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800179c:	1ccd      	adds	r5, r1, #3
 800179e:	f025 0503 	bic.w	r5, r5, #3
 80017a2:	3508      	adds	r5, #8
 80017a4:	2d0c      	cmp	r5, #12
 80017a6:	bf38      	it	cc
 80017a8:	250c      	movcc	r5, #12
 80017aa:	2d00      	cmp	r5, #0
 80017ac:	4607      	mov	r7, r0
 80017ae:	db01      	blt.n	80017b4 <_malloc_r+0x1c>
 80017b0:	42a9      	cmp	r1, r5
 80017b2:	d905      	bls.n	80017c0 <_malloc_r+0x28>
 80017b4:	230c      	movs	r3, #12
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	2600      	movs	r6, #0
 80017ba:	4630      	mov	r0, r6
 80017bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017c0:	4e2e      	ldr	r6, [pc, #184]	; (800187c <_malloc_r+0xe4>)
 80017c2:	f000 f8e5 	bl	8001990 <__malloc_lock>
 80017c6:	6833      	ldr	r3, [r6, #0]
 80017c8:	461c      	mov	r4, r3
 80017ca:	bb34      	cbnz	r4, 800181a <_malloc_r+0x82>
 80017cc:	4629      	mov	r1, r5
 80017ce:	4638      	mov	r0, r7
 80017d0:	f7ff ffc2 	bl	8001758 <sbrk_aligned>
 80017d4:	1c43      	adds	r3, r0, #1
 80017d6:	4604      	mov	r4, r0
 80017d8:	d14d      	bne.n	8001876 <_malloc_r+0xde>
 80017da:	6834      	ldr	r4, [r6, #0]
 80017dc:	4626      	mov	r6, r4
 80017de:	2e00      	cmp	r6, #0
 80017e0:	d140      	bne.n	8001864 <_malloc_r+0xcc>
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	4631      	mov	r1, r6
 80017e6:	4638      	mov	r0, r7
 80017e8:	eb04 0803 	add.w	r8, r4, r3
 80017ec:	f000 f848 	bl	8001880 <_sbrk_r>
 80017f0:	4580      	cmp	r8, r0
 80017f2:	d13a      	bne.n	800186a <_malloc_r+0xd2>
 80017f4:	6821      	ldr	r1, [r4, #0]
 80017f6:	3503      	adds	r5, #3
 80017f8:	1a6d      	subs	r5, r5, r1
 80017fa:	f025 0503 	bic.w	r5, r5, #3
 80017fe:	3508      	adds	r5, #8
 8001800:	2d0c      	cmp	r5, #12
 8001802:	bf38      	it	cc
 8001804:	250c      	movcc	r5, #12
 8001806:	4629      	mov	r1, r5
 8001808:	4638      	mov	r0, r7
 800180a:	f7ff ffa5 	bl	8001758 <sbrk_aligned>
 800180e:	3001      	adds	r0, #1
 8001810:	d02b      	beq.n	800186a <_malloc_r+0xd2>
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	442b      	add	r3, r5
 8001816:	6023      	str	r3, [r4, #0]
 8001818:	e00e      	b.n	8001838 <_malloc_r+0xa0>
 800181a:	6822      	ldr	r2, [r4, #0]
 800181c:	1b52      	subs	r2, r2, r5
 800181e:	d41e      	bmi.n	800185e <_malloc_r+0xc6>
 8001820:	2a0b      	cmp	r2, #11
 8001822:	d916      	bls.n	8001852 <_malloc_r+0xba>
 8001824:	1961      	adds	r1, r4, r5
 8001826:	42a3      	cmp	r3, r4
 8001828:	6025      	str	r5, [r4, #0]
 800182a:	bf18      	it	ne
 800182c:	6059      	strne	r1, [r3, #4]
 800182e:	6863      	ldr	r3, [r4, #4]
 8001830:	bf08      	it	eq
 8001832:	6031      	streq	r1, [r6, #0]
 8001834:	5162      	str	r2, [r4, r5]
 8001836:	604b      	str	r3, [r1, #4]
 8001838:	4638      	mov	r0, r7
 800183a:	f104 060b 	add.w	r6, r4, #11
 800183e:	f000 f8ad 	bl	800199c <__malloc_unlock>
 8001842:	f026 0607 	bic.w	r6, r6, #7
 8001846:	1d23      	adds	r3, r4, #4
 8001848:	1af2      	subs	r2, r6, r3
 800184a:	d0b6      	beq.n	80017ba <_malloc_r+0x22>
 800184c:	1b9b      	subs	r3, r3, r6
 800184e:	50a3      	str	r3, [r4, r2]
 8001850:	e7b3      	b.n	80017ba <_malloc_r+0x22>
 8001852:	6862      	ldr	r2, [r4, #4]
 8001854:	42a3      	cmp	r3, r4
 8001856:	bf0c      	ite	eq
 8001858:	6032      	streq	r2, [r6, #0]
 800185a:	605a      	strne	r2, [r3, #4]
 800185c:	e7ec      	b.n	8001838 <_malloc_r+0xa0>
 800185e:	4623      	mov	r3, r4
 8001860:	6864      	ldr	r4, [r4, #4]
 8001862:	e7b2      	b.n	80017ca <_malloc_r+0x32>
 8001864:	4634      	mov	r4, r6
 8001866:	6876      	ldr	r6, [r6, #4]
 8001868:	e7b9      	b.n	80017de <_malloc_r+0x46>
 800186a:	230c      	movs	r3, #12
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	4638      	mov	r0, r7
 8001870:	f000 f894 	bl	800199c <__malloc_unlock>
 8001874:	e7a1      	b.n	80017ba <_malloc_r+0x22>
 8001876:	6025      	str	r5, [r4, #0]
 8001878:	e7de      	b.n	8001838 <_malloc_r+0xa0>
 800187a:	bf00      	nop
 800187c:	200001c4 	.word	0x200001c4

08001880 <_sbrk_r>:
 8001880:	b538      	push	{r3, r4, r5, lr}
 8001882:	4d06      	ldr	r5, [pc, #24]	; (800189c <_sbrk_r+0x1c>)
 8001884:	2300      	movs	r3, #0
 8001886:	4604      	mov	r4, r0
 8001888:	4608      	mov	r0, r1
 800188a:	602b      	str	r3, [r5, #0]
 800188c:	f7ff fb46 	bl	8000f1c <_sbrk>
 8001890:	1c43      	adds	r3, r0, #1
 8001892:	d102      	bne.n	800189a <_sbrk_r+0x1a>
 8001894:	682b      	ldr	r3, [r5, #0]
 8001896:	b103      	cbz	r3, 800189a <_sbrk_r+0x1a>
 8001898:	6023      	str	r3, [r4, #0]
 800189a:	bd38      	pop	{r3, r4, r5, pc}
 800189c:	200001cc 	.word	0x200001cc

080018a0 <__sread>:
 80018a0:	b510      	push	{r4, lr}
 80018a2:	460c      	mov	r4, r1
 80018a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018a8:	f000 f87e 	bl	80019a8 <_read_r>
 80018ac:	2800      	cmp	r0, #0
 80018ae:	bfab      	itete	ge
 80018b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80018b2:	89a3      	ldrhlt	r3, [r4, #12]
 80018b4:	181b      	addge	r3, r3, r0
 80018b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80018ba:	bfac      	ite	ge
 80018bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80018be:	81a3      	strhlt	r3, [r4, #12]
 80018c0:	bd10      	pop	{r4, pc}

080018c2 <__swrite>:
 80018c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018c6:	461f      	mov	r7, r3
 80018c8:	898b      	ldrh	r3, [r1, #12]
 80018ca:	05db      	lsls	r3, r3, #23
 80018cc:	4605      	mov	r5, r0
 80018ce:	460c      	mov	r4, r1
 80018d0:	4616      	mov	r6, r2
 80018d2:	d505      	bpl.n	80018e0 <__swrite+0x1e>
 80018d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018d8:	2302      	movs	r3, #2
 80018da:	2200      	movs	r2, #0
 80018dc:	f000 f846 	bl	800196c <_lseek_r>
 80018e0:	89a3      	ldrh	r3, [r4, #12]
 80018e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018ea:	81a3      	strh	r3, [r4, #12]
 80018ec:	4632      	mov	r2, r6
 80018ee:	463b      	mov	r3, r7
 80018f0:	4628      	mov	r0, r5
 80018f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018f6:	f7fe bf6d 	b.w	80007d4 <_write_r>

080018fa <__sseek>:
 80018fa:	b510      	push	{r4, lr}
 80018fc:	460c      	mov	r4, r1
 80018fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001902:	f000 f833 	bl	800196c <_lseek_r>
 8001906:	1c43      	adds	r3, r0, #1
 8001908:	89a3      	ldrh	r3, [r4, #12]
 800190a:	bf15      	itete	ne
 800190c:	6560      	strne	r0, [r4, #84]	; 0x54
 800190e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001916:	81a3      	strheq	r3, [r4, #12]
 8001918:	bf18      	it	ne
 800191a:	81a3      	strhne	r3, [r4, #12]
 800191c:	bd10      	pop	{r4, pc}

0800191e <__sclose>:
 800191e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001922:	f000 b801 	b.w	8001928 <_close_r>
	...

08001928 <_close_r>:
 8001928:	b538      	push	{r3, r4, r5, lr}
 800192a:	4d06      	ldr	r5, [pc, #24]	; (8001944 <_close_r+0x1c>)
 800192c:	2300      	movs	r3, #0
 800192e:	4604      	mov	r4, r0
 8001930:	4608      	mov	r0, r1
 8001932:	602b      	str	r3, [r5, #0]
 8001934:	f7ff fac9 	bl	8000eca <_close>
 8001938:	1c43      	adds	r3, r0, #1
 800193a:	d102      	bne.n	8001942 <_close_r+0x1a>
 800193c:	682b      	ldr	r3, [r5, #0]
 800193e:	b103      	cbz	r3, 8001942 <_close_r+0x1a>
 8001940:	6023      	str	r3, [r4, #0]
 8001942:	bd38      	pop	{r3, r4, r5, pc}
 8001944:	200001cc 	.word	0x200001cc

08001948 <_fstat_r>:
 8001948:	b538      	push	{r3, r4, r5, lr}
 800194a:	4d07      	ldr	r5, [pc, #28]	; (8001968 <_fstat_r+0x20>)
 800194c:	2300      	movs	r3, #0
 800194e:	4604      	mov	r4, r0
 8001950:	4608      	mov	r0, r1
 8001952:	4611      	mov	r1, r2
 8001954:	602b      	str	r3, [r5, #0]
 8001956:	f7ff fac4 	bl	8000ee2 <_fstat>
 800195a:	1c43      	adds	r3, r0, #1
 800195c:	d102      	bne.n	8001964 <_fstat_r+0x1c>
 800195e:	682b      	ldr	r3, [r5, #0]
 8001960:	b103      	cbz	r3, 8001964 <_fstat_r+0x1c>
 8001962:	6023      	str	r3, [r4, #0]
 8001964:	bd38      	pop	{r3, r4, r5, pc}
 8001966:	bf00      	nop
 8001968:	200001cc 	.word	0x200001cc

0800196c <_lseek_r>:
 800196c:	b538      	push	{r3, r4, r5, lr}
 800196e:	4d07      	ldr	r5, [pc, #28]	; (800198c <_lseek_r+0x20>)
 8001970:	4604      	mov	r4, r0
 8001972:	4608      	mov	r0, r1
 8001974:	4611      	mov	r1, r2
 8001976:	2200      	movs	r2, #0
 8001978:	602a      	str	r2, [r5, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	f7ff fac1 	bl	8000f02 <_lseek>
 8001980:	1c43      	adds	r3, r0, #1
 8001982:	d102      	bne.n	800198a <_lseek_r+0x1e>
 8001984:	682b      	ldr	r3, [r5, #0]
 8001986:	b103      	cbz	r3, 800198a <_lseek_r+0x1e>
 8001988:	6023      	str	r3, [r4, #0]
 800198a:	bd38      	pop	{r3, r4, r5, pc}
 800198c:	200001cc 	.word	0x200001cc

08001990 <__malloc_lock>:
 8001990:	4801      	ldr	r0, [pc, #4]	; (8001998 <__malloc_lock+0x8>)
 8001992:	f7ff be65 	b.w	8001660 <__retarget_lock_acquire_recursive>
 8001996:	bf00      	nop
 8001998:	200001c0 	.word	0x200001c0

0800199c <__malloc_unlock>:
 800199c:	4801      	ldr	r0, [pc, #4]	; (80019a4 <__malloc_unlock+0x8>)
 800199e:	f7ff be60 	b.w	8001662 <__retarget_lock_release_recursive>
 80019a2:	bf00      	nop
 80019a4:	200001c0 	.word	0x200001c0

080019a8 <_read_r>:
 80019a8:	b538      	push	{r3, r4, r5, lr}
 80019aa:	4d07      	ldr	r5, [pc, #28]	; (80019c8 <_read_r+0x20>)
 80019ac:	4604      	mov	r4, r0
 80019ae:	4608      	mov	r0, r1
 80019b0:	4611      	mov	r1, r2
 80019b2:	2200      	movs	r2, #0
 80019b4:	602a      	str	r2, [r5, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	f7ff fa6a 	bl	8000e90 <_read>
 80019bc:	1c43      	adds	r3, r0, #1
 80019be:	d102      	bne.n	80019c6 <_read_r+0x1e>
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	b103      	cbz	r3, 80019c6 <_read_r+0x1e>
 80019c4:	6023      	str	r3, [r4, #0]
 80019c6:	bd38      	pop	{r3, r4, r5, pc}
 80019c8:	200001cc 	.word	0x200001cc

080019cc <_init>:
 80019cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ce:	bf00      	nop
 80019d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019d2:	bc08      	pop	{r3}
 80019d4:	469e      	mov	lr, r3
 80019d6:	4770      	bx	lr

080019d8 <_fini>:
 80019d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019da:	bf00      	nop
 80019dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019de:	bc08      	pop	{r3}
 80019e0:	469e      	mov	lr, r3
 80019e2:	4770      	bx	lr
